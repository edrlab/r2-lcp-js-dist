{"version":3,"file":"lcpl-update.js","sourceRoot":"","sources":["../../../../src/lsd/lcpl-update.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { LCP } from \"../parser/epub/lcp\";\n\nconst debug = debug_(\"r2:lcp:lsd:lcpl-update\");\n\nexport async function lsdLcpUpdate(\n    lsdJson: any,\n    lcp: LCP): Promise<string> {\n\n    if (lsdJson.updated && lsdJson.updated.license &&\n        (lcp.Updated || lcp.Issued)) {\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\n        const updatedLicense = moment(lcp.Updated || lcp.Issued);\n        const forceUpdate = false; // just for testing!\n        if (forceUpdate ||\n            updatedLicense.isBefore(updatedLicenseLSD)) {\n            debug(\"LSD license updating...\");\n            if (lsdJson.links) {\n                const licenseLink = lsdJson.links.find((link: any) => {\n                    return link.rel === \"license\";\n                });\n                if (!licenseLink) {\n                    return Promise.reject(\"LSD license link is missing.\");\n                }\n\n                debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\n\n                return new Promise<any>(async (resolve, reject) => {\n\n                    const failure = (err: any) => {\n                        reject(err);\n                    };\n\n                    const success = async (response: request.RequestResponse) => {\n\n                        Object.keys(response.headers).forEach((header: string) => {\n                            debug(header + \" => \" + response.headers[header]);\n                        });\n\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                            // SEE: https://github.com/readium/readium-lcp-server/issues/150#issuecomment-356993350\n                            // if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\n                            //     licenseLink.href = licenseLink.href.replace(\"/licenses/\",\n                            // \"/api/v1/purchases/license/\");\n                            //     debug(\"TRYING AGAIN: \" + licenseLink.href);\n                            //     let newRes: any;\n                            //     try {\n                            //         newRes = await lsdLcpUpdate(lsdJson, lcp); // recursive\n                            //     } catch (err) {\n                            //         failure(err);\n                            //         return;\n                            //     }\n                            //     resolve(newRes);\n                            // } else {\n                            //     failure(\"HTTP CODE \" + response.statusCode);\n                            // }\n                            failure(\"HTTP CODE \" + response.statusCode);\n                            return;\n                        }\n\n                        let responseData: Buffer;\n                        try {\n                            responseData = await streamToBufferPromise(response);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                        const lcplStr = responseData.toString(\"utf8\");\n                        debug(lcplStr);\n                        resolve(lcplStr);\n                    };\n\n                    const headers = {\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                    };\n\n                    // No response streaming! :(\n                    // https://github.com/request/request-promise/issues/90\n                    const needsStreamingResponse = true;\n                    if (needsStreamingResponse) {\n                        request.get({\n                            headers,\n                            method: \"GET\",\n                            uri: licenseLink.href,\n                        })\n                            .on(\"response\", success)\n                            .on(\"error\", failure);\n                    } else {\n                        let response: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            response = await requestPromise({\n                                headers,\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: licenseLink.href,\n                            });\n                        } catch (err) {\n                            failure(err);\n                            return;\n                        }\n\n                        await success(response);\n                    }\n                });\n            }\n        }\n    }\n    return Promise.reject(\"No LSD LCP update.\");\n}\n"]}
{"version":3,"file":"return.js","sourceRoot":"","sources":["../../../../src/lsd/return.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/return\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdReturn(\n    lsdJson: any,\n    deviceIDManager: IDeviceIDManager): Promise<any> {\n\n    if (!lsdJson.links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseReturn = lsdJson.links.find((link: any) => {\n        return link.rel === \"return\";\n    });\n    if (!licenseReturn) {\n        return Promise.reject(\"No LSD return link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let returnURL = licenseReturn.href;\n    if (licenseReturn.templated === true || licenseReturn.templated === \"true\") {\n        const urlTemplate = new URITemplate(returnURL);\n        returnURL = (urlTemplate as any).expand({ id: deviceID, name: deviceNAME }, { strict: true });\n\n        // url = url.replace(\"{?end,id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"RETURN: \" + returnURL);\n    }\n\n    return new Promise<any>(async (resolve, reject) => {\n\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n            }\n\n            resolve(responseJson);\n        };\n\n        const headers = {\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.put({\n                headers,\n                method: \"PUT\",\n                uri: returnURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"PUT\",\n                    resolveWithFullResponse: true,\n                    uri: returnURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}
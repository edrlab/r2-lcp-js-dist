{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as bind from \"bindings\";\nimport * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport * as debug_ from \"debug\";\n// https://github.com/edcarroll/ta-json\nimport {\n    JsonElementType,\n    JsonObject,\n    JsonProperty,\n} from \"ta-json-x\";\n\nimport { DUMMY_CRL } from \"./lcp-certificate\";\nimport { Encryption } from \"./lcp-encryption\";\nimport { Link } from \"./lcp-link\";\nimport { Rights } from \"./lcp-rights\";\nimport { Signature } from \"./lcp-signature\";\nimport { User } from \"./lcp-user\";\n\nconst AES_BLOCK_SIZE = 16;\n\nconst debug = debug_(\"r2:lcp#parser/epub/lcp\");\n\nlet LCP_NATIVE_PLUGIN_PATH = path.join(process.cwd(), \"LCP\", \"lcp.node\");\nexport function setLcpNativePluginPath(filepath: string): boolean {\n    LCP_NATIVE_PLUGIN_PATH = filepath;\n    debug(LCP_NATIVE_PLUGIN_PATH);\n\n    const exists = fs.existsSync(LCP_NATIVE_PLUGIN_PATH);\n    debug(\"LCP NATIVE PLUGIN: \" + (exists ? \"OKAY\" : \"MISSING\"));\n    return exists;\n}\n\nexport interface IDecryptedBuffer {\n    buffer: Buffer;\n    inflated: boolean;\n}\n\n@JsonObject()\nexport class LCP {\n    @JsonProperty(\"id\")\n    public ID!: string;\n\n    @JsonProperty(\"provider\")\n    public Provider!: string;\n\n    @JsonProperty(\"issued\")\n    public Issued!: Date;\n\n    @JsonProperty(\"updated\")\n    public Updated!: Date;\n\n    @JsonProperty(\"encryption\")\n    public Encryption!: Encryption;\n\n    @JsonProperty(\"rights\")\n    public Rights!: Rights;\n\n    @JsonProperty(\"user\")\n    public User!: User;\n\n    @JsonProperty(\"signature\")\n    public Signature!: Signature;\n\n    @JsonProperty(\"links\")\n    @JsonElementType(Link)\n    public Links!: Link[];\n\n    public ZipPath: string | undefined;\n    public JsonSource: string | undefined;\n\n    public LSDJson: any;\n\n    // JS impl\n    public ContentKey: Buffer | undefined;\n\n    // Native impl\n    private _usesNativeNodePlugin: boolean | undefined = undefined;\n    private _lcpNative: any | undefined;\n    private _lcpContext: any | undefined;\n\n    public isNativeNodePlugin(): boolean {\n        this.init();\n        return this._usesNativeNodePlugin as boolean;\n    }\n\n    public isReady(): boolean {\n        if (this.isNativeNodePlugin()) {\n            return typeof this._lcpContext !== \"undefined\";\n        }\n        return typeof this.ContentKey !== \"undefined\";\n    }\n\n    public init() {\n\n        if (typeof this._usesNativeNodePlugin !== \"undefined\") {\n            return;\n        }\n\n        this.ContentKey = undefined;\n        this._lcpContext = undefined;\n\n        if (fs.existsSync(LCP_NATIVE_PLUGIN_PATH)) {\n            debug(\"LCP _usesNativeNodePlugin\");\n            const filePath = path.dirname(LCP_NATIVE_PLUGIN_PATH);\n            const fileName = path.basename(LCP_NATIVE_PLUGIN_PATH);\n            debug(filePath);\n            debug(fileName);\n            this._usesNativeNodePlugin = true;\n            this._lcpNative = bind({\n                bindings: fileName,\n                module_root: filePath,\n                try: [[\n                    \"module_root\",\n                    \"bindings\",\n                ]],\n            });\n        } else {\n            debug(\"LCP JS impl\");\n            this._usesNativeNodePlugin = false;\n            this._lcpNative = undefined;\n        }\n    }\n\n    public async decrypt(encryptedContent: Buffer, linkHref: string, needsInflating: boolean):\n        Promise<IDecryptedBuffer> {\n\n        // debug(\"linkHref => needsInflating: \" + linkHref + \" => \" + needsInflating);\n\n        // this.init();\n        if (!this.isNativeNodePlugin()) {\n            return Promise.reject(\"direct decrypt buffer only for native plugin\");\n        }\n        if (!this._lcpContext) {\n            return Promise.reject(\"LCP context not initialized (call tryUserKeys())\");\n        }\n\n        return new Promise<IDecryptedBuffer>((resolve, reject) => {\n\n            this._lcpNative.decrypt(\n                this._lcpContext,\n                encryptedContent,\n                (er: any, decryptedContent: any, inflated: boolean) => {\n                    if (er) {\n                        debug(\"decrypt ERROR\");\n                        debug(er);\n                        reject(er);\n                        return;\n                    }\n                    let buff = decryptedContent;\n                    if (!inflated) {\n                        const padding = decryptedContent[decryptedContent.length - 1];\n                        // debug(padding);\n                        // const buff = Buffer.from(\n                        //     decryptedContent,\n                        //     0,\n                        //     decryptedContent.length - padding);\n                        buff = decryptedContent.slice(0, decryptedContent.length - padding);\n                    }\n                    resolve({\n                        buffer: buff,\n                        inflated: inflated ? true : false, // force bool (from potentially-undefined function parameter)\n                    });\n                },\n                this.JsonSource,\n                linkHref,\n                needsInflating,\n            );\n        });\n    }\n\n    public async tryUserKeys(lcpUserKeys: string[]) {\n        this.init();\n\n        const check = (this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\n            || this.Encryption.Profile === \"http://readium.org/lcp/profile-1.0\")\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect LCP fields.\");\n            debug(this.Encryption.Profile);\n            debug(this.Encryption.ContentKey.Algorithm);\n            debug(this.Encryption.UserKey.Algorithm);\n\n            return Promise.reject(\"Incorrect LCP fields.\");\n        }\n\n        if (this._usesNativeNodePlugin) {\n\n            return new Promise((resolve, reject) => {\n\n                this._lcpNative.findOneValidPassphrase(\n                    this.JsonSource,\n                    lcpUserKeys,\n                    (err: any, validHashedPassphrase: any) => {\n                        if (err) {\n                            debug(\"findOneValidPassphrase ERROR\");\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n                        // debug(validHashedPassphrase);\n\n                        this._lcpNative.createContext(\n                            this.JsonSource,\n                            validHashedPassphrase,\n                            DUMMY_CRL,\n                            (erro: any, context: any) => {\n                                if (erro) {\n                                    debug(\"createContext ERROR\");\n                                    debug(erro);\n                                    reject(erro);\n                                    return;\n                                }\n\n                                // debug(context);\n                                this._lcpContext = context;\n\n                                // const userKey = new Buffer(this.userPassphraseHex as string, \"hex\");\n                                // const buff = new Buffer(context.encryptedContentKey, \"hex\");\n                                // const iv = buff.slice(0, AES_BLOCK_SIZE);\n                                // const encrypted = buff.slice(AES_BLOCK_SIZE);\n                                // const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                                //     userKey,\n                                //     iv);\n                                // decryptStream.setAutoPadding(false);\n                                // const decryptedContent = decryptStream.update(encrypted);\n                                // const nPadding = decryptedContent[decryptedContent.length - 1];\n                                // const size = decryptedContent.length - nPadding;\n                                // this.ContentKey = decryptedContent.slice(0, size); // .toString(\"binary\");\n\n                                // this._lcpNative.decrypt(\n                                //     context,\n                                //     buff,\n                                //     (er: any, decryptedContent: any) => {\n                                //         if (er) {\n                                //             debug(er);\n                                //             resolve(false);\n                                //             return;\n                                //         }\n                                //         const padding = decryptedContent[decryptedContent.length - 1];\n                                //         this.ContentKey = Buffer.from(\n                                //             decryptedContent,\n                                //             0,\n                                //             decryptedContent.length - padding);\n                                //         resolve(true);\n                                //     },\n                                // );\n\n                                resolve();\n                            },\n                        );\n                    },\n                );\n            });\n        }\n\n        for (const lcpUserKey of lcpUserKeys) {\n            try {\n                if (this.tryUserKey(lcpUserKey)) {\n                    return Promise.resolve();\n                }\n            } catch (err) {\n                // debug(err);\n                // ignore\n            }\n        }\n        return Promise.reject(1); // \"Pass fail.\"\n    }\n\n    private tryUserKey(lcpUserKey: string): boolean {\n\n        // const userKey = forge.util.hexToBytes(passPhrase);\n        const userKey = new Buffer(lcpUserKey, \"hex\");\n\n        const keyCheck = new Buffer(this.Encryption.UserKey.KeyCheck, \"base64\");\n        // .toString(\"binary\");\n\n        // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\n        // if (keyCheck !== keyCheck_) {\n        //     debug(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\n        // }\n        // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\n        // debug(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\n        //     + forge.util.bytesToHex(keyCheck));\n\n        const encryptedLicenseID = keyCheck;\n\n        // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\n        const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\n\n        // debug(\"=============== LCP ID\");\n        // debug(lcp.ID);\n        // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\n        // debug(lcpIDbuff.toHex());\n        // debug(lcpIDbuff.toString());\n        // debug(lcpIDbuff.bytes());\n\n        // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\n        // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcCipher.update(lcpIDbuff);\n        // aesCbcCipher.finish();\n        // debug(\"=============== LCP CYPHER\");\n        // // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(aesCbcCipher.output,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // debug(aesCbcCipher.output.bytes());\n        // debug(aesCbcCipher.output.toHex());\n        // // debug(aesCbcCipher.output.toString());\n\n        const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\n\n        const decrypteds: Buffer[] = [];\n        const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv);\n        decryptStream.setAutoPadding(false);\n        const buff1 = decryptStream.update(encrypted);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1) {\n            decrypteds.push(buff1);\n        }\n        const buff2 = decryptStream.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2) {\n            decrypteds.push(buff2);\n        }\n        const decrypted = Buffer.concat(decrypteds);\n\n        const nPaddingBytes = decrypted[decrypted.length - 1];\n        const size = encrypted.length - nPaddingBytes;\n\n        const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\n\n        // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\n        // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher.update(toDecrypt);\n        // aesCbcDecipher.finish();\n\n        // // debug(\"=============== LCP DECYPHER\");\n        // // // breakLength: 100  maxArrayLength: undefined\n        // // console.log(util.inspect(aesCbcDecipher.output,\n        // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // // debug(aesCbcDecipher.output.bytes());\n        // // debug(aesCbcDecipher.output.toHex());\n        // // // debug(aesCbcDecipher.output.toString());\n        // const decryptedOut = aesCbcDecipher.output.toString();\n\n        if (this.ID !== decryptedOut) {\n            debug(\"Failed LCP ID check.\");\n            return false;\n        }\n\n        const encryptedContentKey =\n            new Buffer(this.Encryption.ContentKey.EncryptedValue, \"base64\");\n        // .toString(\"binary\");\n\n        // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\n        const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\n\n        const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\n\n        const decrypteds2: Buffer[] = [];\n        const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv2);\n        decryptStream2.setAutoPadding(false);\n        const buff1_ = decryptStream2.update(encrypted2);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1_) {\n            decrypteds2.push(buff1_);\n        }\n        const buff2_ = decryptStream2.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2_) {\n            decrypteds2.push(buff2_);\n        }\n        const decrypted2 = Buffer.concat(decrypteds2);\n\n        const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\n        const size2 = encrypted2.length - nPaddingBytes2;\n\n        this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\n\n        // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\n        // const toDecrypt2 =\n        //     forge.util.createBuffer(encrypted2, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher2.update(toDecrypt2);\n        // aesCbcDecipher2.finish();\n        // const contentKey = new Buffer(aesCbcDecipher2.output.bytes());\n\n        // let userKey: string | undefined;\n        // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\n\n        // if (lcpPass) {\n        //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\n        // } else {\n        //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\n        //     const sha256 = forge.md.sha256.create();\n        //     sha256.update(userPassPhrase, \"utf8\");\n        //     const digest = sha256.digest();\n        //     userKey = digest.bytes(); // 32 bytes => AES-256 key\n        //     // publication.AddToInternal(\"lcp_user_key\", userKey);\n        //     // debug(\"---LCP user key == passphrase + SHA256 digest HEX: \"\n        //     //     + digest.toHex() + \" // \" + userKey.length);\n        // }\n\n        return true;\n    }\n}\n"]}
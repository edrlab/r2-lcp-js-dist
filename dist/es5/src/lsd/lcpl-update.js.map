{"version":3,"file":"lcpl-update.js","sourceRoot":"","sources":["../../../../src/lsd/lcpl-update.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { LCP } from \"../parser/epub/lcp\";\n\nconst debug = debug_(\"r2:lcp#lsd/lcpl-update\");\n\nexport async function lsdLcpUpdate(\n    lsdJson: any,\n    lcp: LCP): Promise<string> {\n\n    if (lsdJson.updated && lsdJson.updated.license &&\n        (lcp.Updated || lcp.Issued)) {\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\n        const updatedLicense = moment(lcp.Updated || lcp.Issued);\n        const forceUpdate = false; // just for testing!\n        if (forceUpdate ||\n            updatedLicense.isBefore(updatedLicenseLSD)) {\n            debug(\"LSD license updating...\");\n            if (lsdJson.links) {\n                const licenseLink = lsdJson.links.find((link: any) => {\n                    return link.rel === \"license\";\n                });\n                if (!licenseLink) {\n                    return Promise.reject(\"LSD license link is missing.\");\n                }\n\n                debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\n\n                return new Promise<any>(async (resolve, reject) => {\n\n                    const failure = (err: any) => {\n                        reject(err);\n                    };\n\n                    const success = async (response: request.RequestResponse) => {\n\n                        Object.keys(response.headers).forEach((header: string) => {\n                            debug(header + \" => \" + response.headers[header]);\n                        });\n\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                            // SEE: https://github.com/readium/readium-lcp-server/issues/150#issuecomment-356993350\n                            // if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\n                            //     licenseLink.href = licenseLink.href.replace(\"/licenses/\",\n                            // \"/api/v1/purchases/license/\");\n                            //     debug(\"TRYING AGAIN: \" + licenseLink.href);\n                            //     let newRes: any;\n                            //     try {\n                            //         newRes = await lsdLcpUpdate(lsdJson, lcp); // recursive\n                            //     } catch (err) {\n                            //         failure(err);\n                            //         return;\n                            //     }\n                            //     resolve(newRes);\n                            // } else {\n                            //     failure(\"HTTP CODE \" + response.statusCode);\n                            // }\n                            failure(\"HTTP CODE \" + response.statusCode);\n\n                            let d: Buffer;\n                            try {\n                                d = await streamToBufferPromise(response);\n                            } catch (err) {\n                                return;\n                            }\n                            const s = d.toString(\"utf8\");\n                            debug(s);\n                            return;\n                        }\n\n                        let responseData: Buffer;\n                        try {\n                            responseData = await streamToBufferPromise(response);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                        const lcplStr = responseData.toString(\"utf8\");\n                        debug(lcplStr);\n                        resolve(lcplStr);\n                    };\n\n                    const headers = {\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                    };\n\n                    // No response streaming! :(\n                    // https://github.com/request/request-promise/issues/90\n                    const needsStreamingResponse = true;\n                    if (needsStreamingResponse) {\n                        request.get({\n                            headers,\n                            method: \"GET\",\n                            uri: licenseLink.href,\n                        })\n                            .on(\"response\", success)\n                            .on(\"error\", failure);\n                    } else {\n                        let response: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            response = await requestPromise({\n                                headers,\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: licenseLink.href,\n                            });\n                        } catch (err) {\n                            failure(err);\n                            return;\n                        }\n\n                        await success(response);\n                    }\n                });\n            }\n        }\n    }\n    return Promise.reject(\"No LSD LCP update.\");\n}\n"]}
{"version":3,"file":"register.js","sourceRoot":"","sources":["../../../../src/lsd/register.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/register\");\n\nexport async function lsdRegister(\n    lsdJson: any,\n    deviceIDManager: IDeviceIDManager): Promise<any> {\n\n    if (!lsdJson.links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRegister = lsdJson.links.find((link: any) => {\n        return link.rel === \"register\";\n    });\n    if (!licenseRegister) {\n        return Promise.reject(\"No LSD register link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let doRegister = false;\n    if (lsdJson.status === \"ready\") {\n        doRegister = true;\n    } else if (lsdJson.status === \"active\") {\n\n        let deviceIDForStatusDoc: string | undefined;\n        try {\n            deviceIDForStatusDoc = await deviceIDManager.checkDeviceID(lsdJson.id);\n        } catch (err) {\n            debug(err);\n            // ignore\n            // return Promise.reject(\"xxx\");\n        }\n\n        if (!deviceIDForStatusDoc) {\n            doRegister = true;\n        } else if (deviceIDForStatusDoc !== deviceID) {\n            debug(\"LSD registered device ID is different?\");\n            // this should really never happen ... but let's ensure anyway.\n            doRegister = true;\n        }\n    }\n\n    if (!doRegister) {\n        return Promise.reject(\"No need to LSD register.\");\n    }\n\n    let registerURL = licenseRegister.href;\n    if (licenseRegister.templated === true || licenseRegister.templated === \"true\") {\n        const urlTemplate = new URITemplate(registerURL);\n        registerURL = (urlTemplate as any).expand({ id: deviceID, name: deviceNAME }, { strict: true });\n\n        // url = url.replace(\"{?id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    debug(\"REGISTER: \" + registerURL);\n\n    return new Promise<any>(async (resolve, reject) => {\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            Object.keys(response.headers).forEach((header: string) => {\n                debug(header + \" => \" + response.headers[header]);\n            });\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + response.statusCode);\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            debug(responseStr);\n            const responseJson = global.JSON.parse(responseStr);\n            debug(responseJson);\n\n            if (responseJson.status === \"active\") {\n                try {\n                    await deviceIDManager.recordDeviceID(responseJson.id);\n                } catch (err) {\n                    debug(err);\n                    // reject(err);\n                    // return;\n                }\n            }\n\n            resolve(responseJson);\n        };\n\n        const headers = {\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.post({\n                headers,\n                method: \"POST\",\n                uri: registerURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"POST\",\n                    resolveWithFullResponse: true,\n                    uri: registerURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}
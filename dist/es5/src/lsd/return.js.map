{"version":3,"file":"return.js","sourceRoot":"","sources":["../../../../src/lsd/return.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json-x\";\n\nimport { LSD } from \"../parser/epub/lsd\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/return\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdReturn(\n    lsdJSON: any,\n    deviceIDManager: IDeviceIDManager): Promise<any> {\n\n    if (lsdJSON instanceof LSD) {\n        return lsdReturn_(lsdJSON as LSD, deviceIDManager);\n    }\n\n    let lsd: LSD | undefined;\n    try {\n        lsd = TAJSON.deserialize<LSD>(lsdJSON, LSD);\n    } catch (err) {\n        debug(err);\n        debug(lsdJSON);\n        return Promise.reject(\"Bad LSD JSON?\");\n    }\n\n    const obj = lsdReturn_(lsd, deviceIDManager);\n    return TAJSON.serialize(obj);\n}\n\nexport async function lsdReturn_(\n    lsd: LSD,\n    deviceIDManager: IDeviceIDManager): Promise<LSD> {\n\n    if (!lsd) {\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n    if (!lsd.Links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseReturn = lsd.Links.find((link) => {\n        return link.Rel === \"return\";\n    });\n    if (!licenseReturn) {\n        return Promise.reject(\"No LSD return link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let returnURL = licenseReturn.Href;\n    if (licenseReturn.Templated) {\n        const urlTemplate = new URITemplate(returnURL);\n        returnURL = (urlTemplate as any).expand({ id: deviceID, name: deviceNAME }, { strict: true });\n\n        // url = url.replace(\"{?end,id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"RETURN: \" + returnURL);\n    }\n\n    return new Promise<LSD>(async (resolve, reject) => {\n\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n            }\n\n            try {\n                const newLsd = TAJSON.deserialize<LSD>(responseJson, LSD);\n                if (IS_DEV) {\n                    debug(newLsd);\n                }\n                resolve(newLsd);\n            } catch (err) {\n                debug(err);\n                resolve(responseJson);\n            }\n        };\n\n        const headers = {\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.put({\n                headers,\n                method: \"PUT\",\n                uri: returnURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"PUT\",\n                    resolveWithFullResponse: true,\n                    uri: returnURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}
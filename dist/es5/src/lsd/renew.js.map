{"version":3,"file":"renew.js","sourceRoot":"","sources":["../../../../src/lsd/renew.ts"],"names":[],"mappings":";;;;AAOA,8BAAgC;AAChC,iCAAmC;AACnC,uDAAyD;AAEzD,sEAA+E;AAE/E,0CAAyC;AACzC,gDAAqE;AAGrE,2BAA8B;AAC9B,mDAAsD;AAEtD,IAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAEzC,IAAM,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC;AAE1F,SAAsB,QAAQ,CAC1B,GAAqB,EACrB,OAAY,EACZ,eAAiC,EACjC,WAAwC;;;;YAExC,IAAI,OAAO,YAAY,SAAG,EAAE;gBACxB,WAAO,SAAS,CAAC,GAAG,EAAE,OAAc,EAAE,eAAe,CAAC,EAAC;aAC1D;YAGD,IAAI;gBACA,GAAG,GAAG,gCAAiB,CAAM,OAAO,EAAE,SAAG,CAAC,CAAC;aAC9C;YAAC,OAAO,GAAG,EAAE;gBACV,KAAK,CAAC,GAAG,CAAC,CAAC;gBACX,KAAK,CAAC,OAAO,CAAC,CAAC;gBACf,WAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,EAAC;aAC1C;YAEK,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;YAC9D,WAAO,8BAAe,CAAC,GAAG,CAAC,EAAC;;;CAC/B;AArBD,4BAqBC;AAED,SAAsB,SAAS,CAC3B,GAAqB,EACrB,GAAQ,EACR,eAAiC,EACjC,WAAwC;;;;;;;oBAExC,IAAI,CAAC,GAAG,EAAE;wBACN,WAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAC;qBACrD;oBACD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;wBACZ,WAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,EAAC;qBAC1C;oBAEK,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAI;wBACrC,OAAO,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC;oBAChC,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,YAAY,EAAE;wBACf,WAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;qBAC/C;;;;oBAIc,WAAM,eAAe,CAAC,WAAW,EAAE,EAAA;;oBAA9C,QAAQ,GAAG,SAAmC,CAAC;;;;oBAE/C,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,WAAO,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC,EAAC;;;oBAKzC,WAAM,eAAe,CAAC,aAAa,EAAE,EAAA;;oBAAlD,UAAU,GAAG,SAAqC,CAAC;;;;oBAEnD,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,WAAO,OAAO,CAAC,MAAM,CAAC,gCAAgC,CAAC,EAAC;;oBAGxD,QAAQ,GAAW,YAAY,CAAC,IAAI,CAAC;oBACzC,IAAI,YAAY,CAAC,SAAS,EAAE;wBAClB,WAAW,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;wBACxC,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;wBACnG,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAErB,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;wBAE9B,IAAY,CAAC,MAAM,CAAC,UAAC,IAAS;4BAE3B,IAAI,CAAC,GAAG,GAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,WAAW,EAAE,CAAC;wBAClC,CAAC,CAAC,CAAC;wBACH,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;qBAI9B;oBACD,IAAI,MAAM,EAAE;wBACR,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC;qBAC/B;oBAED,WAAO,IAAI,OAAO,CAAM,UAAO,OAAO,EAAE,MAAM;;;;;;wCAEpC,OAAO,GAAG,UAAC,GAAQ;4CACrB,MAAM,CAAC,GAAG,CAAC,CAAC;wCAChB,CAAC,CAAC;wCAEI,OAAO,GAAG,UAAO,QAAiC;;;;;wDAEpD,IAAI,MAAM,EAAE;4DACR,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,MAAc;gEACjD,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;4DACtD,CAAC,CAAC,CAAC;yDACN;6DAEG,CAAA,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,GAAG,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,CAAA,EAAhF,cAAgF;wDAC5E,QAAQ,SAAQ,CAAC;;;;wDAEN,WAAM,mCAAqB,CAAC,QAAQ,CAAC,EAAA;;wDAAhD,QAAQ,GAAG,SAAqC,CAAC;;;;wDAEjD,IAAI,MAAM,EAAE;4DACR,KAAK,CAAC,SAAO,CAAC,CAAC;yDAClB;wDACD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wDAC7B,WAAO;;wDAEX,IAAI;4DACM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;4DAC1C,IAAI,MAAM,EAAE;gEACR,KAAK,CAAC,OAAO,CAAC,CAAC;6DAClB;4DACD,IAAI;gEACM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gEAC5C,IAAI,MAAM,EAAE;oEACR,KAAK,CAAC,QAAQ,CAAC,CAAC;iEACnB;gEACD,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC;gEAC9C,OAAO,CAAC,QAAQ,CAAC,CAAC;6DACrB;4DAAC,OAAO,OAAO,EAAE;gEACd,IAAI,MAAM,EAAE;oEACR,KAAK,CAAC,OAAO,CAAC,CAAC;iEAClB;gEACD,OAAO,CAAC,EAAE,cAAc,EAAE,QAAQ,CAAC,UAAU,EAAE,gBAAgB,EAAE,OAAO,EAAE,CAAC,CAAC;6DAC/E;yDACJ;wDAAC,OAAO,MAAM,EAAE;4DACb,IAAI,MAAM,EAAE;gEACR,KAAK,CAAC,MAAM,CAAC,CAAC;6DACjB;4DACD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;yDAChC;wDACD,WAAO;;;wDAKQ,WAAM,mCAAqB,CAAC,QAAQ,CAAC,EAAA;;wDAApD,YAAY,GAAG,SAAqC,CAAC;;;;wDAErD,MAAM,CAAC,KAAG,CAAC,CAAC;wDACZ,WAAO;;wDAEL,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wDAClD,IAAI,MAAM,EAAE;4DACR,KAAK,CAAC,WAAW,CAAC,CAAC;yDACtB;wDACK,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;wDACpD,IAAI,MAAM,EAAE;4DACR,KAAK,CAAC,YAAY,CAAC,CAAC;yDACvB;wDAED,IAAI;4DACM,MAAM,GAAG,gCAAiB,CAAM,YAAY,EAAE,SAAG,CAAC,CAAC;4DACzD,IAAI,MAAM,EAAE;gEACR,KAAK,CAAC,MAAM,CAAC,CAAC;6DACjB;4DACD,OAAO,CAAC,MAAM,CAAC,CAAC;yDACnB;wDAAC,OAAO,GAAG,EAAE;4DACV,KAAK,CAAC,GAAG,CAAC,CAAC;4DACX,OAAO,CAAC,YAAY,CAAC,CAAC;yDACzB;;;;6CACJ,CAAC;wCAEI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;4CAC1B,QAAQ,EAAE,kCAAkC;4CAC5C,iBAAiB,EAAE,4BAA4B;4CAC/C,YAAY,EAAE,cAAc;yCAC/B,EAAE,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wCAI7B,sBAAsB,GAAG,IAAI,CAAC;6CAChC,sBAAsB,EAAtB,cAAsB;wCACtB,OAAO,CAAC,GAAG,CAAC;4CACR,OAAO,SAAA;4CACP,MAAM,EAAE,KAAK;4CACb,GAAG,EAAE,QAAQ;yCAChB,CAAC;6CACG,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;6CACvB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;;;wCAEtB,QAAQ,SAA6B,CAAC;;;;wCAG3B,WAAM,cAAc,CAAC;gDAC5B,OAAO,SAAA;gDACP,MAAM,EAAE,KAAK;gDACb,uBAAuB,EAAE,IAAI;gDAC7B,GAAG,EAAE,QAAQ;6CAChB,CAAC,EAAA;;wCALF,QAAQ,GAAG,SAKT,CAAC;;;;wCAEH,OAAO,CAAC,KAAG,CAAC,CAAC;wCACb,WAAO;4CAGX,WAAM,OAAO,CAAC,QAAQ,CAAC,EAAA;;wCAAvB,SAAuB,CAAC;;;;;6BAE/B,CAAC,EAAC;;;;CACN;AA5KD,8BA4KC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { LSD } from \"../parser/epub/lsd\";\nimport { TaJsonDeserialize, TaJsonSerialize } from \"../serializable\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URI = require(\"urijs\");\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/renew\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdRenew(\n    end: Date | undefined,\n    lsdJSON: any,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<any> {\n\n    if (lsdJSON instanceof LSD) {\n        return lsdRenew_(end, lsdJSON as LSD, deviceIDManager);\n    }\n\n    let lsd: LSD | undefined;\n    try {\n        lsd = TaJsonDeserialize<LSD>(lsdJSON, LSD);\n    } catch (err) {\n        debug(err);\n        debug(lsdJSON);\n        return Promise.reject(\"Bad LSD JSON?\");\n    }\n\n    const obj = lsdRenew_(end, lsd, deviceIDManager, httpHeaders);\n    return TaJsonSerialize(obj);\n}\n\nexport async function lsdRenew_(\n    end: Date | undefined,\n    lsd: LSD,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<LSD> {\n\n    if (!lsd) {\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n    if (!lsd.Links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRenew = lsd.Links.find((link) => {\n        return link.Rel === \"renew\";\n    });\n    if (!licenseRenew) {\n        return Promise.reject(\"No LSD renew link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let renewURL: string = licenseRenew.Href;\n    if (licenseRenew.Templated) {\n        const urlTemplate = new URITemplate(renewURL);\n        const uri1 = urlTemplate.expand({ end: \"xxx\", id: deviceID, name: deviceNAME }, { strict: false });\n        renewURL = uri1.toString();\n\n        const uri2 = new URI(renewURL); // URIjs necessary for .search() to work\n        // TODO: urijs types broke this! (lib remains unchanged)\n        (uri2 as any).search((data: any) => {\n            // overrides existing (leaves others intact)\n            data.end = end?.toISOString(); // can be undefined\n        });\n        renewURL = uri2.toString();\n\n        // url = url.replace(\"{?end,id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"RENEW: \" + renewURL);\n    }\n\n    return new Promise<LSD>(async (resolve, reject) => {\n\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n            }\n\n            try {\n                const newLsd = TaJsonDeserialize<LSD>(responseJson, LSD);\n                if (IS_DEV) {\n                    debug(newLsd);\n                }\n                resolve(newLsd);\n            } catch (err) {\n                debug(err);\n                resolve(responseJson);\n            }\n        };\n\n        const headers = Object.assign({\n            \"Accept\": \"application/json,application/xml\",\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n            \"User-Agent\": \"Readium2-LCP\",\n        }, httpHeaders ? httpHeaders : {});\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.put({\n                headers,\n                method: \"PUT\",\n                uri: renewURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"PUT\",\n                    resolveWithFullResponse: true,\n                    uri: renewURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}
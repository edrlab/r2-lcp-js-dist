{"version":3,"file":"publication-download.js","sourceRoot":"","sources":["../../../src/publication-download.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { injectFileInZip } from \"@utils/zip/zipInjector\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { LCP } from \"./parser/epub/lcp\";\n\nconst debug = debug_(\"r2:lcp#publication-download\");\n\nexport async function downloadEPUBFromLCPL(filePath: string, dir: string, destFileName: string): Promise<string[]> {\n\n    return new Promise<string[]>(async (resolve, reject) => {\n\n        const lcplStr = fs.readFileSync(filePath, { encoding: \"utf8\" });\n        // debug(lcplStr);\n        const lcplJson = global.JSON.parse(lcplStr);\n        const lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n        if (lcpl.Links) {\n            const pubLink = lcpl.Links.find((link) => {\n                return link.Rel === \"publication\";\n            });\n            if (pubLink) {\n\n                const destPathTMP = path.join(dir, destFileName + \".tmp\");\n                const destPathFINAL = path.join(dir, destFileName);\n\n                const failure = (err: any) => {\n                    debug(err);\n                    reject(pubLink.Href + \" (\" + err + \")\");\n                };\n\n                const success = async (response: request.RequestResponse) => {\n\n                    Object.keys(response.headers).forEach((header: string) => {\n                        debug(header + \" => \" + response.headers[header]);\n                    });\n\n                    if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                        failure(\"HTTP CODE \" + response.statusCode);\n                        return;\n                    }\n\n                    const destStreamTMP = fs.createWriteStream(destPathTMP);\n                    response.pipe(destStreamTMP);\n                    // response.on(\"end\", () => {\n                    // });\n                    destStreamTMP.on(\"finish\", () => {\n\n                        const zipError = (err: any) => {\n                            debug(err);\n                            reject(destPathTMP + \" (\" + err + \")\");\n                        };\n\n                        const doneCallback = () => {\n                            setTimeout(() => {\n                                fs.unlinkSync(destPathTMP);\n                            }, 1000);\n\n                            resolve([destPathFINAL, pubLink.Href]);\n                        };\n                        const zipEntryPath = \"META-INF/license.lcpl\";\n\n                        injectFileInZip(destPathTMP, destPathFINAL, filePath, zipEntryPath, zipError, doneCallback);\n                    });\n                };\n\n                // No response streaming! :(\n                // https://github.com/request/request-promise/issues/90\n                const needsStreamingResponse = true;\n                if (needsStreamingResponse) {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: pubLink.Href,\n                    })\n                        .on(\"response\", success)\n                        .on(\"error\", failure);\n                } else {\n                    let response: requestPromise.FullResponse;\n                    try {\n                        // tslint:disable-next-line:await-promise no-floating-promises\n                        response = await requestPromise({\n                            headers: {},\n                            method: \"GET\",\n                            resolveWithFullResponse: true,\n                            uri: pubLink.Href,\n                        });\n                    } catch (err) {\n                        failure(err);\n                        return;\n                    }\n\n                    await success(response);\n                }\n            }\n        }\n    });\n}\n"]}
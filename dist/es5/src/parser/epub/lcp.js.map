{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as bind from \"bindings\";\nimport * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport * as debug_ from \"debug\";\n// https://github.com/edcarroll/ta-json\nimport {\n    JsonElementType,\n    JsonObject,\n    JsonProperty,\n} from \"ta-json\";\n\nimport { DUMMY_CRL } from \"./lcp-certificate\";\nimport { Encryption } from \"./lcp-encryption\";\nimport { Link } from \"./lcp-link\";\nimport { Rights } from \"./lcp-rights\";\nimport { Signature } from \"./lcp-signature\";\nimport { User } from \"./lcp-user\";\n\nconst AES_BLOCK_SIZE = 16;\n\nconst debug = debug_(\"r2:publication:lcp\");\n\nlet LCP_NATIVE_PLUGIN_PATH = path.join(process.cwd(), \"LCP\", \"lcp.node\");\nexport function setLcpNativePluginPath(filepath: string): boolean {\n    LCP_NATIVE_PLUGIN_PATH = filepath;\n    debug(LCP_NATIVE_PLUGIN_PATH);\n\n    const exists = fs.existsSync(LCP_NATIVE_PLUGIN_PATH);\n    debug(\"LCP NATIVE PLUGIN: \" + (exists ? \"OKAY\" : \"MISSING\"));\n    return exists;\n}\n\nexport interface ITryLcpUserKeyResult {\n    okay: boolean;\n}\n\n@JsonObject()\nexport class LCP {\n    @JsonProperty(\"id\")\n    public ID!: string;\n\n    @JsonProperty(\"provider\")\n    public Provider!: string;\n\n    @JsonProperty(\"issued\")\n    public Issued!: Date;\n\n    @JsonProperty(\"updated\")\n    public Updated!: Date;\n\n    @JsonProperty(\"encryption\")\n    public Encryption!: Encryption;\n\n    @JsonProperty(\"rights\")\n    public Rights!: Rights;\n\n    @JsonProperty(\"user\")\n    public User!: User;\n\n    @JsonProperty(\"signature\")\n    public Signature!: Signature;\n\n    @JsonProperty(\"links\")\n    @JsonElementType(Link)\n    public Links!: Link[];\n\n    public ZipPath: string | undefined;\n    public JsonSource: string | undefined;\n\n    public LSDJson: any;\n\n    // JS impl\n    public ContentKey: Buffer | undefined;\n\n    // Native impl\n    private _usesNativeNodePlugin: boolean | undefined = undefined;\n    private _lcpNative: any | undefined;\n    private _lcpContext: any | undefined;\n\n    public isNativeNodePlugin(): boolean {\n        this.init();\n        return this._usesNativeNodePlugin as boolean;\n    }\n\n    public isReady(): boolean {\n        if (this.isNativeNodePlugin()) {\n            return typeof this._lcpContext !== \"undefined\";\n        }\n        return typeof this.ContentKey !== \"undefined\";\n    }\n\n    public init() {\n\n        if (typeof this._usesNativeNodePlugin !== \"undefined\") {\n            return;\n        }\n\n        this.ContentKey = undefined;\n        this._lcpContext = undefined;\n\n        if (fs.existsSync(LCP_NATIVE_PLUGIN_PATH)) {\n            debug(\"LCP _usesNativeNodePlugin\");\n            const filePath = path.dirname(LCP_NATIVE_PLUGIN_PATH);\n            const fileName = path.basename(LCP_NATIVE_PLUGIN_PATH);\n            debug(filePath);\n            debug(fileName);\n            this._usesNativeNodePlugin = true;\n            this._lcpNative = bind({\n                bindings: fileName,\n                module_root: filePath,\n                try: [[\n                    \"module_root\",\n                    \"bindings\",\n                ]],\n            });\n        } else {\n            debug(\"LCP JS impl\");\n            this._usesNativeNodePlugin = false;\n            this._lcpNative = undefined;\n        }\n    }\n\n    public async decrypt(encryptedContent: Buffer): Promise<Buffer> {\n        // this.init();\n        if (!this.isNativeNodePlugin()) {\n            return Promise.reject(\"direct decrypt buffer only for native plugin\");\n        }\n        if (!this._lcpContext) {\n            return Promise.reject(\"LCP context not initialized (call tryUserKeys())\");\n        }\n\n        return new Promise<Buffer>((resolve, reject) => {\n\n            this._lcpNative.decrypt(\n                this._lcpContext,\n                encryptedContent,\n                (er: any, decryptedContent: any) => {\n                    if (er) {\n                        debug(er);\n                        reject(er);\n                        return;\n                    }\n                    const padding = decryptedContent[decryptedContent.length - 1];\n                    // debug(padding);\n                    // const buff = Buffer.from(\n                    //     decryptedContent,\n                    //     0,\n                    //     decryptedContent.length - padding);\n                    const buff = decryptedContent.slice(0, decryptedContent.length - padding);\n                    resolve(buff);\n                },\n            );\n        });\n    }\n\n    public async tryUserKeys(lcpUserKeys: string[]): Promise<ITryLcpUserKeyResult> {\n        this.init();\n\n        const check = (this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\n            || this.Encryption.Profile === \"http://readium.org/lcp/profile-1.0\")\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect LCP fields.\");\n            debug(this.Encryption.Profile);\n            debug(this.Encryption.ContentKey.Algorithm);\n            debug(this.Encryption.UserKey.Algorithm);\n\n            return Promise.reject(\"Incorrect LCP fields.\");\n        }\n\n        if (this._usesNativeNodePlugin) {\n\n            return new Promise<ITryLcpUserKeyResult>((resolve, reject) => {\n\n                this._lcpNative.findOneValidPassphrase(\n                    this.JsonSource,\n                    lcpUserKeys,\n                    (err: any, validHashedPassphrase: any) => {\n                        if (err) {\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n                        // debug(validHashedPassphrase);\n\n                        this._lcpNative.createContext(\n                            this.JsonSource,\n                            validHashedPassphrase,\n                            DUMMY_CRL,\n                            (erro: any, context: any) => {\n                                if (erro) {\n                                    debug(erro);\n                                    reject(err);\n                                    return;\n                                }\n\n                                // debug(context);\n                                this._lcpContext = context;\n\n                                // const userKey = new Buffer(this.userPassphraseHex as string, \"hex\");\n                                // const buff = new Buffer(context.encryptedContentKey, \"hex\");\n                                // const iv = buff.slice(0, AES_BLOCK_SIZE);\n                                // const encrypted = buff.slice(AES_BLOCK_SIZE);\n                                // const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                                //     userKey,\n                                //     iv);\n                                // decryptStream.setAutoPadding(false);\n                                // const decryptedContent = decryptStream.update(encrypted);\n                                // const nPadding = decryptedContent[decryptedContent.length - 1];\n                                // const size = decryptedContent.length - nPadding;\n                                // this.ContentKey = decryptedContent.slice(0, size); // .toString(\"binary\");\n\n                                // this._lcpNative.decrypt(\n                                //     context,\n                                //     buff,\n                                //     (er: any, decryptedContent: any) => {\n                                //         if (er) {\n                                //             debug(er);\n                                //             resolve(false);\n                                //             return;\n                                //         }\n                                //         const padding = decryptedContent[decryptedContent.length - 1];\n                                //         this.ContentKey = Buffer.from(\n                                //             decryptedContent,\n                                //             0,\n                                //             decryptedContent.length - padding);\n                                //         resolve(true);\n                                //     },\n                                // );\n\n                                resolve({ okay: true });\n                            },\n                        );\n                    },\n                );\n            });\n        }\n\n        for (const lcpUserKey of lcpUserKeys) {\n            let res: ITryLcpUserKeyResult;\n            try {\n                res = await this.tryUserKey(lcpUserKey);\n                return Promise.resolve(res);\n            } catch (err) {\n                // debug(err);\n                // ignore\n            }\n        }\n        return Promise.reject(\"Pass fail.\");\n    }\n\n    private async tryUserKey(lcpUserKey: string): Promise<ITryLcpUserKeyResult> {\n\n        // const userKey = forge.util.hexToBytes(passPhrase);\n        const userKey = new Buffer(lcpUserKey, \"hex\");\n\n        const keyCheck = new Buffer(this.Encryption.UserKey.KeyCheck, \"base64\");\n        // .toString(\"binary\");\n\n        // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\n        // if (keyCheck !== keyCheck_) {\n        //     debug(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\n        // }\n        // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\n        // debug(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\n        //     + forge.util.bytesToHex(keyCheck));\n\n        const encryptedLicenseID = keyCheck;\n\n        // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\n        const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\n\n        // debug(\"=============== LCP ID\");\n        // debug(lcp.ID);\n        // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\n        // debug(lcpIDbuff.toHex());\n        // debug(lcpIDbuff.toString());\n        // debug(lcpIDbuff.bytes());\n\n        // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\n        // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcCipher.update(lcpIDbuff);\n        // aesCbcCipher.finish();\n        // debug(\"=============== LCP CYPHER\");\n        // // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(aesCbcCipher.output,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // debug(aesCbcCipher.output.bytes());\n        // debug(aesCbcCipher.output.toHex());\n        // // debug(aesCbcCipher.output.toString());\n\n        const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\n\n        const decrypteds: Buffer[] = [];\n        const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv);\n        decryptStream.setAutoPadding(false);\n        const buff1 = decryptStream.update(encrypted);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1) {\n            decrypteds.push(buff1);\n        }\n        const buff2 = decryptStream.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2) {\n            decrypteds.push(buff2);\n        }\n        const decrypted = Buffer.concat(decrypteds);\n\n        const nPaddingBytes = decrypted[decrypted.length - 1];\n        const size = encrypted.length - nPaddingBytes;\n\n        const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\n\n        // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\n        // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher.update(toDecrypt);\n        // aesCbcDecipher.finish();\n\n        // // debug(\"=============== LCP DECYPHER\");\n        // // // breakLength: 100  maxArrayLength: undefined\n        // // console.log(util.inspect(aesCbcDecipher.output,\n        // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // // debug(aesCbcDecipher.output.bytes());\n        // // debug(aesCbcDecipher.output.toHex());\n        // // // debug(aesCbcDecipher.output.toString());\n        // const decryptedOut = aesCbcDecipher.output.toString();\n\n        if (this.ID !== decryptedOut) {\n            debug(\"Failed LCP ID check.\");\n            return Promise.reject(\"Failed LCP ID check.\");\n        }\n\n        const encryptedContentKey =\n            new Buffer(this.Encryption.ContentKey.EncryptedValue, \"base64\");\n        // .toString(\"binary\");\n\n        // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\n        const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\n\n        const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\n\n        const decrypteds2: Buffer[] = [];\n        const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv2);\n        decryptStream2.setAutoPadding(false);\n        const buff1_ = decryptStream2.update(encrypted2);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1_) {\n            decrypteds2.push(buff1_);\n        }\n        const buff2_ = decryptStream2.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2_) {\n            decrypteds2.push(buff2_);\n        }\n        const decrypted2 = Buffer.concat(decrypteds2);\n\n        const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\n        const size2 = encrypted2.length - nPaddingBytes2;\n\n        this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\n\n        // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\n        // const toDecrypt2 =\n        //     forge.util.createBuffer(encrypted2, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher2.update(toDecrypt2);\n        // aesCbcDecipher2.finish();\n        // const contentKey = new Buffer(aesCbcDecipher2.output.bytes());\n\n        // let userKey: string | undefined;\n        // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\n\n        // if (lcpPass) {\n        //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\n        // } else {\n        //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\n        //     const sha256 = forge.md.sha256.create();\n        //     sha256.update(userPassPhrase, \"utf8\");\n        //     const digest = sha256.digest();\n        //     userKey = digest.bytes(); // 32 bytes => AES-256 key\n        //     // publication.AddToInternal(\"lcp_user_key\", userKey);\n        //     // debug(\"---LCP user key == passphrase + SHA256 digest HEX: \"\n        //     //     + digest.toHex() + \" // \" + userKey.length);\n        // }\n\n        return Promise.resolve({ okay: true });\n    }\n}\n"]}
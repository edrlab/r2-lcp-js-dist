{"version":3,"file":"transformer-lcp.js","sourceRoot":"","sources":["../../../../src/transform/transformer-lcp.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as crypto from \"crypto\";\nimport * as zlib from \"zlib\";\n\nimport { Encrypted } from \"@models/metadata-encrypted\";\nimport { IDecryptedBuffer, LCP } from \"@parser/epub/lcp\";\nimport { RangeStream } from \"@utils/stream/RangeStream\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\nimport * as debug_ from \"debug\";\n\n// import * as forge from \"node-forge\";\nimport { bufferToStream, streamToBufferPromise } from \"@utils/stream/BufferUtils\";\n// import { CounterPassThroughStream } from \"@utils/stream/CounterPassThroughStream\";\n// import { Transform } from \"stream\";\n\nconst debug = debug_(\"r2:lcp#transform/transformer-lcp\");\n\nconst AES_BLOCK_SIZE = 16;\n\n// let streamCounter = 0;\n\nconst readStream = async (s: NodeJS.ReadableStream, n: number): Promise<Buffer> => {\n    return new Promise<Buffer>((resolve, reject) => {\n        // s.pause();\n        const onReadable = () => {\n            // debug(\"readStream READABLE\");\n            const b = s.read(n);\n            s.removeListener(\"readable\", onReadable);\n            s.removeListener(\"error\", reject);\n            // s.resume();\n            resolve(b as Buffer);\n        };\n        s.on(\"readable\", onReadable);\n        s.on(\"error\", reject);\n        // s.on(\"end\", () => {\n        //     debug(\"readStream END\");\n        // });\n        // s.on(\"drain\", () => {\n        //     debug(\"readStream DRAIN\");\n        // });\n        // s.on(\"finish\", () => {\n        //     debug(\"readStream FINISH\");\n        // });\n    });\n};\n\nexport interface ICryptoInfo {\n    length: number;\n    padding: number;\n}\n\nexport function supports(\n    lcp: LCP,\n    _linkHref: string,\n    linkPropertiesEncrypted: Encrypted): boolean {\n\n    if (!lcp) {\n        return false;\n    }\n\n    if (!lcp.isReady()) {\n        debug(\"LCP not ready!\");\n        return false;\n    }\n\n    const check = linkPropertiesEncrypted.Scheme === \"http://readium.org/2014/01/lcp\"\n        && (linkPropertiesEncrypted.Profile === \"http://readium.org/lcp/basic-profile\" ||\n        linkPropertiesEncrypted.Profile === \"http://readium.org/lcp/profile-1.0\")\n        && linkPropertiesEncrypted.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n        ;\n    if (!check) {\n        debug(\"Incorrect resource LCP fields.\");\n        debug(linkPropertiesEncrypted.Scheme);\n        debug(linkPropertiesEncrypted.Profile);\n        debug(linkPropertiesEncrypted.Algorithm);\n        return false;\n    }\n\n    return true;\n}\n\nexport async function transformStream(\n    lcp: LCP,\n    linkHref: string,\n    linkPropertiesEncrypted: Encrypted,\n    stream: IStreamAndLength,\n    isPartialByteRangeRequest: boolean,\n    partialByteBegin: number,\n    partialByteEnd: number): Promise<IStreamAndLength> {\n\n    const isCompressionNone = linkPropertiesEncrypted.Compression === \"none\";\n    const isCompressionDeflate = linkPropertiesEncrypted.Compression === \"deflate\";\n\n    let plainTextSize = -1;\n\n    let nativelyDecryptedStream: NodeJS.ReadableStream | undefined;\n    let nativelyInflated = false;\n    if (lcp.isNativeNodePlugin()) {\n\n        debug(\"DECRYPT: \" + linkHref);\n\n        let fullEncryptedBuffer: Buffer;\n        try {\n            fullEncryptedBuffer = await streamToBufferPromise(stream.stream);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(\"OUCH!\");\n        }\n\n        // debug(fullEncryptedBuffer.length);\n\n        // debug(fullEncryptedBuffer.slice(0, 32));\n\n        // debug(fullEncryptedBuffer.slice(fullEncryptedBuffer.length - 32));\n\n        let res: IDecryptedBuffer;\n        try {\n            res = await lcp.decrypt(fullEncryptedBuffer, linkHref, isCompressionDeflate);\n        } catch (err) {\n            debug(err);\n            return Promise.reject(\"OUCH!\");\n        }\n\n        const nativelyDecryptedBuffer = res.buffer;\n        nativelyInflated = res.inflated;\n\n        // debug(nativelyDecryptedBuffer.length);\n\n        plainTextSize = nativelyDecryptedBuffer.length;\n        linkPropertiesEncrypted.DecryptedLengthBeforeInflate = plainTextSize;\n\n        if (!nativelyInflated && // necessary, even if isCompressionNone! (LCP inflation byte variance)\n            linkPropertiesEncrypted.OriginalLength &&\n            isCompressionNone &&\n            linkPropertiesEncrypted.OriginalLength !== plainTextSize) {\n\n            debug(`############### ` +\n                `LCP transformStream() LENGTH NOT MATCH ` +\n                `linkPropertiesEncrypted.OriginalLength !== plainTextSize: ` +\n                `${linkPropertiesEncrypted.OriginalLength} !== ${plainTextSize}`);\n        }\n\n        nativelyDecryptedStream = bufferToStream(nativelyDecryptedBuffer);\n    } else {\n        let cryptoInfo: ICryptoInfo | undefined;\n        let cypherBlockPadding = -1;\n        if (linkPropertiesEncrypted.DecryptedLengthBeforeInflate > 0) {\n            plainTextSize = linkPropertiesEncrypted.DecryptedLengthBeforeInflate;\n            cypherBlockPadding = linkPropertiesEncrypted.CypherBlockPadding;\n        } else {\n            // const timeBegin = process.hrtime();\n            try {\n                cryptoInfo = await getDecryptedSizeStream(lcp, stream);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n            plainTextSize = cryptoInfo.length;\n            cypherBlockPadding = cryptoInfo.padding;\n\n            // length cached to avoid resetting the stream to zero-position\n            linkPropertiesEncrypted.DecryptedLengthBeforeInflate = plainTextSize;\n            linkPropertiesEncrypted.CypherBlockPadding = cypherBlockPadding;\n\n            try {\n                stream = await stream.reset();\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n\n            // const timeElapsed = process.hrtime(timeBegin);\n            // debug(`LCP transformStream() ---- getDecryptedSizeStream():` +\n            //     `${timeElapsed[0]} seconds + ${timeElapsed[1]} nanoseconds`);\n\n            // debug(\"LCP transformStream() ---- getDecryptedSizeStream(): \" + plainTextSize);\n\n            if (linkPropertiesEncrypted.OriginalLength &&\n                isCompressionNone &&\n                linkPropertiesEncrypted.OriginalLength !== plainTextSize) {\n\n                debug(`############### ` +\n                    `LCP transformStream() LENGTH NOT MATCH ` +\n                    `linkPropertiesEncrypted.OriginalLength !== plainTextSize: ` +\n                    `${linkPropertiesEncrypted.OriginalLength} !== ${plainTextSize}`);\n            }\n        }\n    }\n\n    if (partialByteBegin < 0) {\n        partialByteBegin = 0;\n    }\n\n    if (partialByteEnd < 0) {\n        partialByteEnd = plainTextSize - 1;\n        if (linkPropertiesEncrypted.OriginalLength) {\n            partialByteEnd = linkPropertiesEncrypted.OriginalLength - 1;\n        }\n    }\n\n    let destStream: NodeJS.ReadableStream;\n    if (nativelyDecryptedStream) {\n        destStream = nativelyDecryptedStream;\n    } else {\n        // const partialByteLength = (partialByteEnd + 1) - partialByteBegin;\n\n        let rawDecryptStream: NodeJS.ReadableStream | undefined;\n\n        let ivBuffer: Buffer | undefined;\n        if (linkPropertiesEncrypted.CypherBlockIV) {\n            ivBuffer = Buffer.from(linkPropertiesEncrypted.CypherBlockIV, \"binary\");\n\n            const cypherRangeStream = new RangeStream(AES_BLOCK_SIZE, stream.length - 1, stream.length);\n            stream.stream.pipe(cypherRangeStream);\n            rawDecryptStream = cypherRangeStream;\n        } else {\n            // const ivRangeStream = new RangeStream(0, AES_BLOCK_SIZE - 1, stream.length);\n            // stream.stream.pipe(ivRangeStream);\n            // try {\n            //     ivBuffer = await streamToBufferPromise(ivRangeStream);\n            // } catch (err) {\n            //     debug(err);\n            //     return Promise.reject(\"OUCH!\");\n            // }\n            // try {\n            //     stream = await stream.reset();\n            // } catch (err) {\n            //     debug(err);\n            //     return Promise.reject(err);\n            // }\n\n            // debug(\"D1\");\n            // debug(ivBuffer.length);\n            // debug(ivBuffer.toString(\"hex\"));\n\n            // ivBuffer = stream.stream.read(AES_BLOCK_SIZE) as Buffer;\n\n            try {\n                ivBuffer = await readStream(stream.stream, AES_BLOCK_SIZE);\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n\n            // debug(\"D2\");\n            // debug(ivBuffer.length);\n            // debug(ivBuffer.toString(\"hex\"));\n            // b06ca4cec8831eb158f1a317503f5101\n            // === asharedculture_soundtrack.mp3\n            //\n            // 07e6870e5d708f39e98316b5c0a574c5\n            // === shared-culture.mp4\n\n            linkPropertiesEncrypted.CypherBlockIV = ivBuffer.toString(\"binary\");\n\n            stream.stream.resume();\n            rawDecryptStream = stream.stream;\n        }\n        // debug(\"IV: \" + forge.util.bytesToHex(ivBuffer));\n\n        // debug(forge.util.bytesToHex(contentKey as string));\n\n        // https://github.com/nodejs/node/blob/master/lib/crypto.js#L259\n        const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n            lcp.ContentKey, // new Buffer(contentKey as string, \"binary\"),\n            ivBuffer);\n        decryptStream.setAutoPadding(false);\n        rawDecryptStream.pipe(decryptStream);\n\n        destStream = decryptStream;\n\n        if (linkPropertiesEncrypted.CypherBlockPadding) {\n            // debugx(\"cryptoInfo.padding: \" + cypherBlockPadding);\n            const cypherUnpaddedStream = new RangeStream(0, plainTextSize - 1, plainTextSize);\n            destStream.pipe(cypherUnpaddedStream);\n            destStream = cypherUnpaddedStream;\n        }\n\n        // const counterStream2 = new CounterPassThroughStream(++streamCounter);\n        // destStream.pipe(counterStream2)\n        //     .on(\"progress\", function f() {\n        //         // debug(\"Crypto PROGRESS: \" +\n        //         //     (this as CounterPassThroughStream).id +\n        //         //     \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n        //     })\n        //     .on(\"end\", function f() {\n        //         debug(\"Crypto END: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"close\", function f() {\n        //         debug(\"Crypto CLOSE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .once(\"finish\", function f() {\n        //         debug(\"Crypto FINISH: \" +\n        //             (this as CounterPassThroughStream).id +\n        //             \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n\n        //         if (plainTextSize !==\n        //             (this as CounterPassThroughStream).bytesReceived) {\n\n        //             debug(`############### ` +\n        //                 `LCP Crypto LENGTH NOT MATCH ` +\n        //                 `plainTextSize !== bytesReceived:` +\n        //                 `${plainTextSize} !== ` +\n        //                 `${(this as CounterPassThroughStream).bytesReceived}`);\n        //         }\n        //     })\n        //     .on(\"error\", function f() {\n        //         debug(\"CounterPassThroughStream ERROR: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"pipe\", function f() {\n        //         debug(\"CounterPassThroughStream PIPE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"unpipe\", function f() {\n        //         debug(\"CounterPassThroughStream UNPIPE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"drain\", function f() {\n        //         // debug(\"CounterPassThroughStream DRAIN: \" +\n        //         //     (this as CounterPassThroughStream).id);\n        //     });\n        // destStream = counterStream2;\n    }\n\n    if (!nativelyInflated && isCompressionDeflate) {\n\n        // https://github.com/nodejs/node/blob/master/lib/zlib.js\n        const inflateStream = zlib.createInflateRaw();\n        destStream.pipe(inflateStream);\n        destStream = inflateStream;\n\n        // const counterStream = new CounterPassThroughStream(++streamCounter);\n        // inflateStream.pipe(counterStream)\n        //     .on(\"progress\", function f() {\n        //         // debug(\"CounterPassThroughStream PROGRESS: \" +\n        //         //     (this as CounterPassThroughStream).id +\n        //         //     \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n        //     })\n        //     .on(\"end\", function f() {\n        //         debug(\"CounterPassThroughStream END: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"close\", function f() {\n        //         debug(\"CounterPassThroughStream CLOSE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .once(\"finish\", function f() {\n        //         debug(\"CounterPassThroughStream FINISH: \" +\n        //             (this as CounterPassThroughStream).id +\n        //             \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n\n        //         if (linkPropertiesEncrypted.OriginalLength &&\n        //             linkPropertiesEncrypted.OriginalLength !==\n        //             (this as CounterPassThroughStream).bytesReceived) {\n\n        //             debug(`############### ` +\n        //                 `LCP zlib.createInflateRaw LENGTH NOT MATCH ` +\n        //                 `linkPropertiesEncrypted.OriginalLength !== bytesReceived:` +\n        //                 `${linkPropertiesEncrypted.OriginalLength} !== ` +\n        //                 `${(this as CounterPassThroughStream).bytesReceived}`);\n        //         }\n        //     })\n        //     .on(\"error\", function f() {\n        //         debug(\"CounterPassThroughStream ERROR: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"pipe\", function f() {\n        //         debug(\"CounterPassThroughStream PIPE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"unpipe\", function f() {\n        //         debug(\"CounterPassThroughStream UNPIPE: \" +\n        //             (this as CounterPassThroughStream).id);\n        //     })\n        //     .on(\"drain\", function f() {\n        //         // debug(\"CounterPassThroughStream DRAIN: \" +\n        //         //     (this as CounterPassThroughStream).id);\n        //     });\n        // destStream = counterStream;\n    }\n\n    const l = (!nativelyInflated && linkPropertiesEncrypted.OriginalLength) ?\n        linkPropertiesEncrypted.OriginalLength : plainTextSize;\n\n    if (isPartialByteRangeRequest) {\n        const rangeStream = new RangeStream(partialByteBegin, partialByteEnd, l);\n        destStream.pipe(rangeStream);\n        destStream = rangeStream;\n        // l = partialByteLength;\n    }\n\n    const sal: IStreamAndLength = {\n        length: l,\n        reset: async () => {\n\n            let resetedStream: IStreamAndLength;\n            try {\n                resetedStream = await stream.reset();\n            } catch (err) {\n                debug(err);\n                return Promise.reject(err);\n            }\n\n            return transformStream(\n                lcp, linkHref, linkPropertiesEncrypted,\n                resetedStream,\n                isPartialByteRangeRequest,\n                partialByteBegin, partialByteEnd);\n        },\n        stream: destStream,\n    };\n    return Promise.resolve(sal);\n}\n\nexport async function getDecryptedSizeStream(\n    lcp: LCP,\n    stream: IStreamAndLength): Promise<ICryptoInfo> {\n\n    return new Promise<ICryptoInfo>((resolve, reject) => {\n\n        // debug(\"LCP getDecryptedSizeStream() stream.length: \" + stream.length);\n\n        // debug(\"LCP getDecryptedSizeStream() AES_BLOCK_SIZE: \" + AES_BLOCK_SIZE);\n\n        // CipherText = IV + PlainText + BLOCK - (PlainText MOD BLOCK)\n        // overflow: (PlainText MOD BLOCK) === PlainText - (floor(PlainText / BLOCK) * BLOCK)\n        // thus: CipherText = IV + BLOCK * (floor(PlainText / BLOCK) + 1)\n\n        // IV = AES_BLOCK_SIZE (first block in cyphertext)\n        // + at least one block\n        // (last one in cyphertext is either full 16-bytes random W3C padding\n        // in case plaintext is exactly multiple of block size,\n        // or partial cypher + padding)\n        const TWO_AES_BLOCK_SIZE = 2 * AES_BLOCK_SIZE;\n        if (stream.length < TWO_AES_BLOCK_SIZE) {\n            reject(\"crypto err\");\n            return;\n        }\n        const readPos = stream.length - TWO_AES_BLOCK_SIZE;\n\n        const cypherRangeStream = new RangeStream(readPos, readPos + TWO_AES_BLOCK_SIZE - 1, stream.length);\n        stream.stream.pipe(cypherRangeStream);\n\n        // let buff: Buffer;\n        // try {\n        //     buff = await streamToBufferPromise(cypherRangeStream);\n        // } catch (err) {\n        //     debug(err);\n        //     reject(\"crypto err\");\n        //     return;\n        // }\n\n        // // debug(\"LCP getDecryptedSizeStream() buff.length: \" + buff.length);\n\n        // // // debug(buff.toString(\"hex\"));\n        // // for (let i = 0; i < buff.length; i++) {\n        // //     const b = buff[i];\n        // //     if (i === AES_BLOCK_SIZE) {\n        // //         debug(\"____\");\n        // //     }\n        // //     debug(b);\n        // // }\n\n        // resolve(this.getDecryptedSizeBuffer_(stream.length, buff));\n\n        const decrypteds: Buffer[] = [];\n\n        cypherRangeStream.on(\"readable\", () => {\n            // debug(\"readable\");\n\n            const ivBuffer = cypherRangeStream.read(AES_BLOCK_SIZE);\n            if (!ivBuffer) {\n                // debug(\"readable null (end)\");\n                return;\n            }\n\n            // debug(ivBuffer.toString(\"hex\"));\n            // e10cb2a27aa7b9633f104ccca113d499\n            // === asharedculture_soundtrack.mp3\n            //\n            // 5d290cb97ea83ccc01a67d30a9c7eeaa\n            // === shared-culture.mp4\n\n            const encrypted = cypherRangeStream.read(AES_BLOCK_SIZE);\n            // debug(encrypted.toString(\"hex\"));\n            // 14b46cb1e279d51c12ce13989b3d6cf3\n            // === asharedculture_soundtrack.mp3\n            //\n            // b2924b9b0cd64ab7cd349beef8e4b068\n            // === shared-culture.mp4\n\n            const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                lcp.ContentKey, // new Buffer(contentKey as string, \"binary\"),\n                ivBuffer);\n            decryptStream.setAutoPadding(false);\n\n            const buff1 = decryptStream.update(encrypted);\n            // debug(buff1.toString(\"hex\"));\n            // ecf8848cb3c0c97b9e159ec2daa96810\n            // === asharedculture_soundtrack.mp3\n            //\n            // 004c61766635332e31372e308b6f7004\n            // === shared-culture.mp4\n            if (buff1) {\n                decrypteds.push(buff1);\n            }\n\n            const buff2 = decryptStream.final();\n            // debug(buff2.toString(\"hex\"));\n            if (buff2) {\n                decrypteds.push(buff2);\n            }\n        });\n\n        cypherRangeStream.on(\"end\", () => {\n            // debug(\"end\");\n\n            const decrypted = Buffer.concat(decrypteds);\n            // debug(decrypted.toString(\"hex\"));\n            // debug(decrypted.length);\n\n            const nPaddingBytes = decrypted[AES_BLOCK_SIZE - 1]; // decrypted.length = 1\n            // debug(nPaddingBytes);\n\n            const size = stream.length - AES_BLOCK_SIZE - nPaddingBytes;\n\n            const res: ICryptoInfo = {\n                length: size,\n                padding: nPaddingBytes,\n            };\n            resolve(res);\n        });\n\n        cypherRangeStream.on(\"error\", () => {\n            reject(\"DECRYPT err\");\n        });\n    });\n}\n\n// cc-shared-culture/EPUB/audio/asharedculture_soundtrack.mp3\n// 3265152 bytes\n// 3 MB\n// 204072 * 16 BLOCKS (inc IV)\n// 3265152 MOD 16 = 0\n// IV 16\n// PAD 16, full extra block (random)\n// + 32 = 3265184 total cypher-text\n\n// cc-shared-culture/EPUB/video/shared-culture.mp4\n// 21784780 bytes\n// 21 MB\n// 1361548.75 * 16 BLOCKS (inc IV)\n// 21784780 MOD 16 = 12 (0.75 * 16)\n// IV 16\n// PAD 4 (12 cypher-text bytes in last block)\n// + 20 = 21784800 total cypher-text\n\n// cc-shared-culture/EPUB/video/shared-culture.webm\n// 8330669 bytes\n// 8 MB\n// 520666.8125 * 16 BLOCKS (inc IV)\n// 8330669 MOD 16 = 13 (0.8125 * 16)\n// IV 16\n// PAD 3 (13 cypher-text bytes in last block)\n// + 19 = 8330688 total cypher-text\n"]}
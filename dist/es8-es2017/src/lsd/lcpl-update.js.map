{"version":3,"file":"lcpl-update.js","sourceRoot":"","sources":["../../../../src/lsd/lcpl-update.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { LCP } from \"../parser/epub/lcp\";\n\nconst debug = debug_(\"r2:lcp:lsd:lcpl-update\");\n\nexport async function lsdLcpUpdate(\n    lsdJson: any,\n    lcp: LCP): Promise<string> {\n\n    if (lsdJson.updated && lsdJson.updated.license &&\n        (lcp.Updated || lcp.Issued)) {\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\n        const updatedLicense = moment(lcp.Updated || lcp.Issued);\n        const forceUpdate = false; // just for testing!\n        if (forceUpdate ||\n            updatedLicense.isBefore(updatedLicenseLSD)) {\n            debug(\"LSD license updating...\");\n            if (lsdJson.links) {\n                const licenseLink = lsdJson.links.find((link: any) => {\n                    return link.rel === \"license\";\n                });\n                if (!licenseLink) {\n                    return Promise.reject(\"LSD license link is missing.\");\n                }\n\n                debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\n\n                return new Promise<any>(async (resolve, reject) => {\n\n                    const failure = (err: any) => {\n                        reject(err);\n                    };\n\n                    const success = async (response: request.RequestResponse) => {\n\n                        Object.keys(response.headers).forEach((header: string) => {\n                            debug(header + \" => \" + response.headers[header]);\n                        });\n\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                            if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\n                                licenseLink.href = licenseLink.href.replace(\"/licenses/\", \"/api/v1/purchases/license/\");\n                                debug(\"TRYING AGAIN: \" + licenseLink.href);\n                                let newRes: any;\n                                try {\n                                    newRes = await lsdLcpUpdate(lsdJson, lcp); // recursive\n                                } catch (err) {\n                                    failure(err);\n                                    return;\n                                }\n                                resolve(newRes);\n                            } else {\n                                failure(\"HTTP CODE \" + response.statusCode);\n                            }\n                            return;\n                        }\n\n                        let responseData: Buffer;\n                        try {\n                            responseData = await streamToBufferPromise(response);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                        if (!responseData) {\n                            return;\n                        }\n                        const lcplStr = responseData.toString(\"utf8\");\n                        debug(lcplStr);\n                        resolve(lcplStr);\n                    };\n\n                    const headers = {\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                    };\n\n                    // No response streaming! :(\n                    // https://github.com/request/request-promise/issues/90\n                    const needsStreamingResponse = true;\n                    if (needsStreamingResponse) {\n                        request.get({\n                            headers,\n                            method: \"GET\",\n                            uri: licenseLink.href,\n                        })\n                            .on(\"response\", success)\n                            .on(\"error\", failure);\n                    } else {\n                        let response: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            response = await requestPromise({\n                                headers,\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: licenseLink.href,\n                            });\n                        } catch (err) {\n                            failure(err);\n                            return;\n                        }\n\n                        await success(response);\n                    }\n                });\n            }\n        }\n    }\n    return Promise.reject(\"No LSD LCP update.\");\n}\n"]}
{"version":3,"file":"lcpl-update.js","sourceRoot":"","sources":["../../../../src/lsd/lcpl-update.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { LCP } from \"../parser/epub/lcp\";\n\nconst debug = debug_(\"r2:lcp#lsd/lcpl-update\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdLcpUpdate(\n    lsdJson: any,\n    lcp: LCP): Promise<string> {\n\n    if (lsdJson.updated && lsdJson.updated.license &&\n        (lcp.Updated || lcp.Issued)) {\n        const updatedLicenseLSD = moment(lsdJson.updated.license);\n        const updatedLicense = moment(lcp.Updated || lcp.Issued);\n        const forceUpdate = false; // just for testing!\n        if (forceUpdate ||\n            updatedLicense.isBefore(updatedLicenseLSD)) {\n            if (IS_DEV) {\n                debug(\"LSD license updating...\");\n            }\n            if (lsdJson.links) {\n                const licenseLink = lsdJson.links.find((link: any) => {\n                    return link.rel === \"license\";\n                });\n                if (!licenseLink) {\n                    return Promise.reject(\"LSD license link is missing.\");\n                }\n\n                if (IS_DEV) {\n                    debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.href);\n                }\n\n                return new Promise<any>(async (resolve, reject) => {\n\n                    const failure = (err: any) => {\n                        reject(err);\n                    };\n\n                    const success = async (response: request.RequestResponse) => {\n\n                        if (IS_DEV) {\n                            Object.keys(response.headers).forEach((header: string) => {\n                                debug(header + \" => \" + response.headers[header]);\n                            });\n                        }\n\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                            // SEE: https://github.com/readium/readium-lcp-server/issues/150#issuecomment-356993350\n                            // if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\n                            //     licenseLink.href = licenseLink.href.replace(\"/licenses/\",\n                            // \"/api/v1/purchases/license/\");\n                            //     debug(\"TRYING AGAIN: \" + licenseLink.href);\n                            //     let newRes: any;\n                            //     try {\n                            //         newRes = await lsdLcpUpdate(lsdJson, lcp); // recursive\n                            //     } catch (err) {\n                            //         failure(err);\n                            //         return;\n                            //     }\n                            //     resolve(newRes);\n                            // } else {\n                            //     failure(\"HTTP CODE \" + response.statusCode);\n                            // }\n\n                            let failBuff: Buffer;\n                            try {\n                                failBuff = await streamToBufferPromise(response);\n                            } catch (buffErr) {\n                                if (IS_DEV) {\n                                    debug(buffErr);\n                                }\n                                failure(response.statusCode);\n                                return;\n                            }\n                            try {\n                                const failStr = failBuff.toString(\"utf8\");\n                                if (IS_DEV) {\n                                    debug(failStr);\n                                }\n                                try {\n                                    const failJson = global.JSON.parse(failStr);\n                                    if (IS_DEV) {\n                                        debug(failJson);\n                                    }\n                                    failJson.httpStatusCode = response.statusCode;\n                                    failure(failJson);\n                                } catch (jsonErr) {\n                                    if (IS_DEV) {\n                                        debug(jsonErr);\n                                    }\n                                    failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                                }\n                            } catch (strErr) {\n                                if (IS_DEV) {\n                                    debug(strErr);\n                                }\n                                failure(response.statusCode);\n                            }\n                            return;\n                        }\n\n                        let responseData: Buffer;\n                        try {\n                            responseData = await streamToBufferPromise(response);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                        const lcplStr = responseData.toString(\"utf8\");\n                        if (IS_DEV) {\n                            debug(lcplStr);\n                        }\n                        resolve(lcplStr);\n                    };\n\n                    const headers = {\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                    };\n\n                    // No response streaming! :(\n                    // https://github.com/request/request-promise/issues/90\n                    const needsStreamingResponse = true;\n                    if (needsStreamingResponse) {\n                        request.get({\n                            headers,\n                            method: \"GET\",\n                            uri: licenseLink.href,\n                        })\n                            .on(\"response\", success)\n                            .on(\"error\", failure);\n                    } else {\n                        let response: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            response = await requestPromise({\n                                headers,\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: licenseLink.href,\n                            });\n                        } catch (err) {\n                            failure(err);\n                            return;\n                        }\n\n                        await success(response);\n                    }\n                });\n            }\n        }\n    }\n    return Promise.reject(\"No LSD LCP update.\");\n}\n"]}
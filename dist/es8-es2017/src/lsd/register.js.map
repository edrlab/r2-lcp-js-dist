{"version":3,"file":"register.js","sourceRoot":"","sources":["../../../../src/lsd/register.ts"],"names":[],"mappings":";;;AAOA,gCAAgC;AAChC,mCAAmC;AACnC,yDAAyD;AAEzD,wEAA+E;AAE/E,4CAAqD;AACrD,kDAAqE;AAGrE,qDAAsD;AACtD,MAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAE5C,MAAM,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC;AAEnF,KAAK,UAAU,WAAW,CAC7B,OAAY,EACZ,eAAiC,EACjC,WAAwC;IAExC,IAAI,OAAO,YAAY,SAAG,EAAE;QACxB,OAAO,YAAY,CAAC,OAAc,EAAE,eAAe,CAAC,CAAC;KACxD;IAED,IAAI,GAAoB,CAAC;IACzB,IAAI;QACA,GAAG,GAAG,IAAA,gCAAiB,EAAM,OAAO,EAAE,SAAG,CAAC,CAAC;KAC9C;IAAC,OAAO,GAAG,EAAE;QACV,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,OAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;KAC1C;IAED,MAAM,GAAG,GAAG,YAAY,CAAC,GAAG,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;IAC5D,OAAO,IAAA,8BAAe,EAAC,GAAG,CAAC,CAAC;AAChC,CAAC;AApBD,kCAoBC;AAEM,KAAK,UAAU,YAAY,CAC9B,GAAQ,EACR,eAAiC,EACjC,WAAwC;IAExC,IAAI,CAAC,GAAG,EAAE;QACN,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;KACrD;IACD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;QACZ,OAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;KAC1C;IAED,MAAM,eAAe,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;QAC5C,OAAO,IAAI,CAAC,GAAG,KAAK,UAAU,CAAC;IACnC,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,eAAe,EAAE;QAClB,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;KAClD;IAED,IAAI,QAAgB,CAAC;IACrB,IAAI;QACA,QAAQ,GAAG,MAAM,eAAe,CAAC,WAAW,EAAE,CAAC;KAClD;IAAC,OAAO,GAAG,EAAE;QACV,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;KACzD;IAED,IAAI,UAAkB,CAAC;IACvB,IAAI;QACA,UAAU,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;KACtD;IAAC,OAAO,GAAG,EAAE;QACV,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,OAAO,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;KAC3D;IAED,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAI,GAAG,CAAC,MAAM,KAAK,gBAAU,CAAC,KAAK,EAAE;QACjC,UAAU,GAAG,IAAI,CAAC;KACrB;SAAM,IAAI,GAAG,CAAC,MAAM,KAAK,gBAAU,CAAC,MAAM,EAAE;QAEzC,IAAI,oBAAwC,CAAC;QAC7C,IAAI;YACA,oBAAoB,GAAG,MAAM,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACtE;QAAC,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,GAAG,CAAC,CAAC;SAGd;QAED,IAAI,CAAC,oBAAoB,EAAE;YACvB,UAAU,GAAG,IAAI,CAAC;SACrB;aAAM,IAAI,oBAAoB,KAAK,QAAQ,EAAE;YAC1C,IAAI,MAAM,EAAE;gBACR,KAAK,CAAC,yCAAyC,EAC3C,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC9D;YAED,UAAU,GAAG,IAAI,CAAC;SACrB;KACJ;IAED,IAAI,CAAC,UAAU,EAAE;QACb,OAAO,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;KACrD;IAED,IAAI,WAAW,GAAW,eAAe,CAAC,IAAI,CAAC;IAC/C,IAAI,eAAe,CAAC,SAAS,EAAE;QAC3B,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC;QACjD,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QACtF,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;KAIjC;IACD,IAAI,MAAM,EAAE;QACR,KAAK,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC;KACrC;IAED,OAAO,IAAI,OAAO,CAAM,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,MAAM,OAAO,GAAG,CAAC,GAAQ,EAAE,EAAE;YACzB,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC;QAEF,MAAM,OAAO,GAAG,KAAK,EAAE,QAAiC,EAAE,EAAE;YAExD,IAAI,MAAM,EAAE;gBACR,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAc,EAAE,EAAE;oBACrD,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;aACN;YAED,IAAI,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,GAAG,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE;gBAClF,IAAI,QAAgB,CAAC;gBACrB,IAAI;oBACA,QAAQ,GAAG,MAAM,IAAA,mCAAqB,EAAC,QAAQ,CAAC,CAAC;iBACpD;gBAAC,OAAO,OAAO,EAAE;oBACd,IAAI,MAAM,EAAE;wBACR,KAAK,CAAC,OAAO,CAAC,CAAC;qBAClB;oBACD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;oBAC7B,OAAO;iBACV;gBACD,IAAI;oBACA,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC1C,IAAI,MAAM,EAAE;wBACR,KAAK,CAAC,OAAO,CAAC,CAAC;qBAClB;oBACD,IAAI;wBACA,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBAC5C,IAAI,MAAM,EAAE;4BACR,KAAK,CAAC,QAAQ,CAAC,CAAC;yBACnB;wBACD,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC;wBAC9C,OAAO,CAAC,QAAQ,CAAC,CAAC;qBACrB;oBAAC,OAAO,OAAO,EAAE;wBACd,IAAI,MAAM,EAAE;4BACR,KAAK,CAAC,OAAO,CAAC,CAAC;yBAClB;wBACD,OAAO,CAAC,EAAE,cAAc,EAAE,QAAQ,CAAC,UAAU,EAAE,gBAAgB,EAAE,OAAO,EAAE,CAAC,CAAC;qBAC/E;iBACJ;gBAAC,OAAO,MAAM,EAAE;oBACb,IAAI,MAAM,EAAE;wBACR,KAAK,CAAC,MAAM,CAAC,CAAC;qBACjB;oBACD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBAChC;gBACD,OAAO;aACV;YAED,IAAI,YAAoB,CAAC;YACzB,IAAI;gBACA,YAAY,GAAG,MAAM,IAAA,mCAAqB,EAAC,QAAQ,CAAC,CAAC;aACxD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,OAAO;aACV;YACD,MAAM,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClD,IAAI,MAAM,EAAE;gBACR,KAAK,CAAC,WAAW,CAAC,CAAC;aACtB;YACD,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACpD,IAAI,MAAM,EAAE;gBACR,KAAK,CAAC,YAAY,CAAC,CAAC;gBACpB,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aAC9B;YAED,IAAI,YAAY,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAClC,IAAI;oBACA,MAAM,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;iBACzD;gBAAC,OAAO,GAAG,EAAE;oBACV,KAAK,CAAC,GAAG,CAAC,CAAC;iBAGd;aACJ;YAED,IAAI;gBACA,MAAM,MAAM,GAAG,IAAA,gCAAiB,EAAM,YAAY,EAAE,SAAG,CAAC,CAAC;gBACzD,IAAI,MAAM,EAAE;oBACR,KAAK,CAAC,MAAM,CAAC,CAAC;iBACjB;gBACD,OAAO,CAAC,MAAM,CAAC,CAAC;aACnB;YAAC,OAAO,GAAG,EAAE;gBACV,KAAK,CAAC,GAAG,CAAC,CAAC;gBACX,OAAO,CAAC,YAAY,CAAC,CAAC;aACzB;QACL,CAAC,CAAC;QAEF,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YAC1B,QAAQ,EAAE,kCAAkC;YAC5C,iBAAiB,EAAE,4BAA4B;YAC/C,YAAY,EAAE,cAAc;SAC/B,EAAE,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAInC,MAAM,sBAAsB,GAAG,IAAI,CAAC;QACpC,IAAI,sBAAsB,EAAE;YACxB,OAAO,CAAC,IAAI,CAAC;gBACT,OAAO;gBACP,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,IAAI;gBACb,GAAG,EAAE,WAAW;aACnB,CAAC;iBACG,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;iBACvB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC7B;aAAM;YACH,IAAI,QAAqC,CAAC;YAC1C,IAAI;gBAEA,QAAQ,GAAG,MAAM,cAAc,CAAC;oBAC5B,OAAO;oBACP,MAAM,EAAE,MAAM;oBACd,uBAAuB,EAAE,IAAI;oBAC7B,GAAG,EAAE,WAAW;iBACnB,CAAC,CAAC;aACN;YAAC,OAAO,GAAG,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,CAAC;gBACb,OAAO;aACV;YAED,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AA5MD,oCA4MC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { LSD, StatusEnum } from \"../parser/epub/lsd\";\nimport { TaJsonDeserialize, TaJsonSerialize } from \"../serializable\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\nconst debug = debug_(\"r2:lcp#lsd/register\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdRegister(\n    lsdJSON: any,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<any> {\n\n    if (lsdJSON instanceof LSD) {\n        return lsdRegister_(lsdJSON as LSD, deviceIDManager);\n    }\n\n    let lsd: LSD | undefined;\n    try {\n        lsd = TaJsonDeserialize<LSD>(lsdJSON, LSD);\n    } catch (err) {\n        debug(err);\n        debug(lsdJSON);\n        return Promise.reject(\"Bad LSD JSON?\");\n    }\n\n    const obj = lsdRegister_(lsd, deviceIDManager, httpHeaders);\n    return TaJsonSerialize(obj);\n}\n\nexport async function lsdRegister_(\n    lsd: LSD,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<LSD> {\n\n    if (!lsd) {\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n    if (!lsd.Links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRegister = lsd.Links.find((link) => {\n        return link.Rel === \"register\";\n    });\n    if (!licenseRegister) {\n        return Promise.reject(\"No LSD register link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let doRegister = false;\n    if (lsd.Status === StatusEnum.Ready) {\n        doRegister = true;\n    } else if (lsd.Status === StatusEnum.Active) {\n\n        let deviceIDForStatusDoc: string | undefined;\n        try {\n            deviceIDForStatusDoc = await deviceIDManager.checkDeviceID(lsd.ID);\n        } catch (err) {\n            debug(err);\n            // ignore\n            // return Promise.reject(\"xxx\");\n        }\n\n        if (!deviceIDForStatusDoc) {\n            doRegister = true;\n        } else if (deviceIDForStatusDoc !== deviceID) {\n            if (IS_DEV) {\n                debug(\"LSD registered device ID is different? \",\n                    lsd.ID, \": \", deviceIDForStatusDoc, \" --- \", deviceID);\n            }\n            // this should really never happen ... but let's ensure anyway.\n            doRegister = true;\n        }\n    }\n\n    if (!doRegister) {\n        return Promise.reject(\"No need to LSD register.\");\n    }\n\n    let registerURL: string = licenseRegister.Href;\n    if (licenseRegister.Templated) {\n        const urlTemplate = new URITemplate(registerURL);\n        const uri1 = urlTemplate.expand({ id: deviceID, name: deviceNAME }, { strict: true });\n        registerURL = uri1.toString();\n\n        // url = url.replace(\"{?id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"REGISTER: \" + registerURL);\n    }\n\n    return new Promise<LSD>(async (resolve, reject) => {\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n                debug(responseJson.status);\n            }\n\n            if (responseJson.status === \"active\") {\n                try {\n                    await deviceIDManager.recordDeviceID(responseJson.id);\n                } catch (err) {\n                    debug(err);\n                    // reject(err);\n                    // return;\n                }\n            }\n\n            try {\n                const newLsd = TaJsonDeserialize<LSD>(responseJson, LSD);\n                if (IS_DEV) {\n                    debug(newLsd);\n                }\n                resolve(newLsd);\n            } catch (err) {\n                debug(err);\n                resolve(responseJson);\n            }\n        };\n\n        const headers = Object.assign({\n            \"Accept\": \"application/json,application/xml\",\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n            \"User-Agent\": \"Readium2-LCP\",\n        }, httpHeaders ? httpHeaders : {});\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.post({\n                headers,\n                method: \"POST\",\n                timeout: 2000,\n                uri: registerURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"POST\",\n                    resolveWithFullResponse: true,\n                    uri: registerURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}
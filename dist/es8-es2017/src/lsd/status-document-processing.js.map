{"version":3,"file":"status-document-processing.js","sourceRoot":"","sources":["../../../../src/lsd/status-document-processing.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { LCP } from \"../parser/epub/lcp\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\nimport { lsdLcpUpdate } from \"./lcpl-update\";\nimport { lsdRegister } from \"./register\";\n\nconst debug = debug_(\"r2:lcp#lsd/status-document-processing\");\n\nexport async function launchStatusDocumentProcessing(\n    lcp: LCP,\n    deviceIDManager: IDeviceIDManager,\n    onStatusDocumentProcessingComplete: (licenseUpdateJson: string | undefined) => void) {\n\n    if (!lcp || !lcp.Links) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n        return;\n    }\n    const linkStatus = lcp.Links.find((link) => {\n        return link.Rel === \"status\";\n    });\n    if (!linkStatus) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n        return;\n    }\n\n    debug(linkStatus);\n\n    const failure = (err: any) => {\n        debug(err);\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n    };\n\n    const success = async (response: request.RequestResponse) => {\n\n        Object.keys(response.headers).forEach((header: string) => {\n            debug(header + \" => \" + response.headers[header]);\n        });\n\n        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n            failure(\"HTTP CODE \" + response.statusCode);\n            return;\n        }\n\n        let responseData: Buffer;\n        try {\n            responseData = await streamToBufferPromise(response);\n        } catch (err) {\n            debug(err);\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(undefined);\n            }\n            return;\n        }\n        const responseStr = responseData.toString(\"utf8\");\n\n        // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n        // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n        // application/vnd.readium.lcp.license.v1.0+json (NEW)\n        // application/vnd.readium.license.status.v1.0+json (LSD)\n        const mime = \"application/vnd.readium.license.status.v1.0+json\";\n        if (response.headers[\"content-type\"] === mime ||\n            response.headers[\"content-type\"] === \"application/json\") {\n            debug(responseStr);\n        }\n        const lsdJson = global.JSON.parse(responseStr);\n        debug(lsdJson);\n\n        lcp.LSDJson = lsdJson;\n\n        // debug(lsdJson.id);\n        // debug(lsdJson.status); // revoked, returned, cancelled, expired\n        // debug(lsdJson.message);\n        // if (lsdJson.updated) {\n        //     debug(lsdJson.updated.license);\n        //     debug(lsdJson.updated.status);\n        // }\n        // if (lsdJson.links) {\n        //     lsdJson.links.forEach((link: any) => {\n        //         debug(link.rel); // license, register, return, renew\n        //         debug(link.href);\n        //         debug(link.type);\n        //         debug(link.templated);\n        //         debug(link.title);\n        //         debug(link.profile);\n        //     });\n        // }\n        // if (lsdJson.potential_rights) {\n        //     debug(lsdJson.potential_rights.end);\n        // }\n        // if (lsdJson.events) {\n        //     lsdJson.events.forEach((event: any) => {\n        //         debug(event.type);\n        //         debug(event.name);\n        //         debug(event.timestamp); // ISO 8601 time and date\n        //         debug(event.id);\n        //     });\n        // }\n\n        let licenseUpdateResponseJson: string | undefined;\n        try {\n            licenseUpdateResponseJson = await lsdLcpUpdate(lsdJson, lcp);\n        } catch (err) {\n            debug(err);\n            // if (onStatusDocumentProcessingComplete) {\n            //     onStatusDocumentProcessingComplete();\n            // }\n            // return;\n        }\n        if (licenseUpdateResponseJson) {\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(licenseUpdateResponseJson);\n            }\n            return;\n        }\n\n        if (lsdJson.status === \"revoked\"\n            || lsdJson.status === \"returned\"\n            || lsdJson.status === \"cancelled\"\n            || lsdJson.status === \"expired\") {\n\n            debug(\"What?! LSD \" + lsdJson.status);\n            // This should really never happen,\n            // as the LCP license should not even pass validation\n            // due to passed end date / expired timestamp\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(undefined);\n            }\n            return;\n        }\n\n        let registerResponseJson: any;\n        try {\n            registerResponseJson = await lsdRegister(lsdJson, deviceIDManager);\n            lcp.LSDJson = registerResponseJson;\n        } catch (err) {\n            debug(err);\n        }\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n    };\n\n    const headers = {\n        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n    };\n\n    // No response streaming! :(\n    // https://github.com/request/request-promise/issues/90\n    const needsStreamingResponse = true;\n    if (needsStreamingResponse) {\n        request.get({\n            headers,\n            method: \"GET\",\n            uri: linkStatus.Href,\n        })\n            .on(\"response\", success)\n            .on(\"error\", failure);\n    } else {\n        let response: requestPromise.FullResponse;\n        try {\n            // tslint:disable-next-line:await-promise no-floating-promises\n            response = await requestPromise({\n                headers,\n                method: \"GET\",\n                resolveWithFullResponse: true,\n                uri: linkStatus.Href,\n            });\n        } catch (err) {\n            failure(err);\n            return;\n        }\n\n        await success(response);\n    }\n}\n"]}
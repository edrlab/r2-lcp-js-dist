{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as bind from \"bindings\";\nimport * as crypto from \"crypto\";\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n// https://github.com/edcarroll/ta-json\nimport { JsonElementType, JsonObject, JsonProperty } from \"ta-json-x\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { CRL_URL, DUMMY_CRL } from \"./lcp-certificate\";\nimport { Encryption } from \"./lcp-encryption\";\nimport { Link } from \"./lcp-link\";\nimport { Rights } from \"./lcp-rights\";\nimport { Signature } from \"./lcp-signature\";\nimport { User } from \"./lcp-user\";\nimport { LSD } from \"./lsd\";\n\nconst AES_BLOCK_SIZE = 16;\n\nconst debug = debug_(\"r2:lcp#parser/epub/lcp\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nlet LCP_NATIVE_PLUGIN_PATH = path.join(process.cwd(), \"LCP\", \"lcp.node\");\nexport function setLcpNativePluginPath(filepath: string): boolean {\n    LCP_NATIVE_PLUGIN_PATH = filepath;\n    if (IS_DEV) {\n        debug(LCP_NATIVE_PLUGIN_PATH);\n    }\n\n    const exists = fs.existsSync(LCP_NATIVE_PLUGIN_PATH);\n    if (IS_DEV) {\n        debug(\"LCP NATIVE PLUGIN: \" + (exists ? \"OKAY\" : \"MISSING\"));\n    }\n    return exists;\n}\n\nexport interface IDecryptedBuffer {\n    buffer: Buffer;\n    inflated: boolean;\n}\n\n@JsonObject()\nexport class LCP {\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L11\n    @JsonProperty(\"id\")\n    public ID!: string;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L20\n    @JsonProperty(\"provider\")\n    public Provider!: string;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L15\n    @JsonProperty(\"issued\")\n    public Issued!: Date;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L25\n    @JsonProperty(\"updated\")\n    public Updated!: Date;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L30\n    @JsonProperty(\"encryption\")\n    public Encryption!: Encryption;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L97\n    @JsonProperty(\"rights\")\n    public Rights!: Rights;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L122\n    @JsonProperty(\"user\")\n    public User!: User;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L146\n    @JsonProperty(\"signature\")\n    public Signature!: Signature;\n\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/readium/lcp-specs/blob/5828f83b6fffee23cbc38870f6f6431744191f21/schema/license.schema.json#L90\n    @JsonProperty(\"links\")\n    @JsonElementType(Link)\n    public Links!: Link[];\n\n    public ZipPath: string | undefined;\n    public JsonSource: string | undefined;\n\n    public LSD: LSD | undefined;\n\n    // JS impl\n    public ContentKey: Buffer | undefined;\n\n    // Native impl\n    private _usesNativeNodePlugin: boolean | undefined = undefined;\n    private _lcpNative: any | undefined;\n    private _lcpContext: any | undefined;\n\n    public isNativeNodePlugin(): boolean {\n        this.init();\n        return this._usesNativeNodePlugin as boolean;\n    }\n\n    public isReady(): boolean {\n        if (this.isNativeNodePlugin()) {\n            return typeof this._lcpContext !== \"undefined\";\n        }\n        return typeof this.ContentKey !== \"undefined\";\n    }\n\n    public init() {\n\n        if (typeof this._usesNativeNodePlugin !== \"undefined\") {\n            return;\n        }\n\n        this.ContentKey = undefined;\n        this._lcpContext = undefined;\n\n        if (fs.existsSync(LCP_NATIVE_PLUGIN_PATH)) {\n            if (IS_DEV) {\n                debug(\"LCP _usesNativeNodePlugin\");\n            }\n            const filePath = path.dirname(LCP_NATIVE_PLUGIN_PATH);\n            const fileName = path.basename(LCP_NATIVE_PLUGIN_PATH);\n            if (IS_DEV) {\n                debug(filePath);\n                debug(fileName);\n            }\n            this._usesNativeNodePlugin = true;\n            this._lcpNative = bind({\n                bindings: fileName,\n                module_root: filePath,\n                try: [[\n                    \"module_root\",\n                    \"bindings\",\n                ]],\n            });\n        } else {\n            if (IS_DEV) {\n                debug(\"LCP JS impl\");\n            }\n            this._usesNativeNodePlugin = false;\n            this._lcpNative = undefined;\n        }\n    }\n\n    public async decrypt(encryptedContent: Buffer, linkHref: string, needsInflating: boolean):\n        Promise<IDecryptedBuffer> {\n\n        // debug(\"linkHref => needsInflating: \" + linkHref + \" => \" + needsInflating);\n\n        // this.init();\n        if (!this.isNativeNodePlugin()) {\n            return Promise.reject(\"direct decrypt buffer only for native plugin\");\n        }\n        if (!this._lcpContext) {\n            return Promise.reject(\"LCP context not initialized (call tryUserKeys())\");\n        }\n\n        return new Promise<IDecryptedBuffer>((resolve, reject) => {\n\n            this._lcpNative.decrypt(\n                this._lcpContext,\n                encryptedContent,\n                (er: any, decryptedContent: any, inflated: boolean) => {\n                    if (er) {\n                        debug(\"decrypt ERROR\");\n                        debug(er);\n                        reject(er);\n                        return;\n                    }\n                    let buff = decryptedContent;\n                    if (!inflated) {\n                        const padding = decryptedContent[decryptedContent.length - 1];\n                        // debug(padding);\n                        // const buff = Buffer.from(\n                        //     decryptedContent,\n                        //     0,\n                        //     decryptedContent.length - padding);\n                        buff = decryptedContent.slice(0, decryptedContent.length - padding);\n                    }\n                    resolve({\n                        buffer: buff,\n                        inflated: inflated ? true : false, // force bool (from potentially-undefined function parameter)\n                    });\n                },\n                this.JsonSource,\n                linkHref,\n                needsInflating,\n            );\n        });\n    }\n\n    public async dummyCreateContext() {\n        this.init();\n\n        if (this._usesNativeNodePlugin) {\n            const crlPem = await this.getCRLPem();\n\n            // always generates USER_KEY_CHECK_INVALID = 141\n            const sha256DummyPassphrase = \"0\".repeat(64);\n\n            return new Promise((resolve, reject) => {\n\n                this._lcpNative.createContext(\n                    this.JsonSource,\n                    sha256DummyPassphrase,\n                    crlPem,\n                    (erro: any, _context: any) => {\n                        if (erro) {\n                            debug(\"dummyCreateContext ERROR\");\n                            debug(erro);\n                            reject(erro);\n                            return;\n                        }\n\n                        // should never happen, as the userkey is fake (USER_KEY_CHECK_INVALID = 141)\n                        resolve();\n                    },\n                );\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    public async tryUserKeys(lcpUserKeys: string[]) {\n        this.init();\n\n        const check = (this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\n            || this.Encryption.Profile === \"http://readium.org/lcp/profile-1.0\")\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect LCP fields.\");\n            debug(this.Encryption.Profile);\n            debug(this.Encryption.ContentKey.Algorithm);\n            debug(this.Encryption.UserKey.Algorithm);\n\n            return Promise.reject(\"Incorrect LCP fields.\");\n        }\n\n        if (this._usesNativeNodePlugin) {\n\n            const crlPem = await this.getCRLPem();\n\n            return new Promise((resolve, reject) => {\n\n                this._lcpNative.findOneValidPassphrase(\n                    this.JsonSource,\n                    lcpUserKeys,\n                    (err: any, validHashedPassphrase: any) => {\n                        if (err) {\n                            debug(\"findOneValidPassphrase ERROR\");\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n                        // debug(validHashedPassphrase);\n\n                        this._lcpNative.createContext(\n                            this.JsonSource,\n                            validHashedPassphrase,\n                            crlPem,\n                            (erro: any, context: any) => {\n                                if (erro) {\n                                    debug(\"createContext ERROR\");\n                                    debug(erro);\n                                    reject(erro);\n                                    return;\n                                }\n\n                                // debug(context);\n                                this._lcpContext = context;\n\n                                // const userKey = Buffer.from(this.userPassphraseHex as string, \"hex\");\n                                // const buff = Buffer.from(context.encryptedContentKey, \"hex\");\n                                // const iv = buff.slice(0, AES_BLOCK_SIZE);\n                                // const encrypted = buff.slice(AES_BLOCK_SIZE);\n                                // const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                                //     userKey,\n                                //     iv);\n                                // decryptStream.setAutoPadding(false);\n                                // const decryptedContent = decryptStream.update(encrypted);\n                                // const nPadding = decryptedContent[decryptedContent.length - 1];\n                                // const size = decryptedContent.length - nPadding;\n                                // this.ContentKey = decryptedContent.slice(0, size); // .toString(\"binary\");\n\n                                // this._lcpNative.decrypt(\n                                //     context,\n                                //     buff,\n                                //     (er: any, decryptedContent: any) => {\n                                //         if (er) {\n                                //             debug(er);\n                                //             resolve(false);\n                                //             return;\n                                //         }\n                                //         const padding = decryptedContent[decryptedContent.length - 1];\n                                //         this.ContentKey = Buffer.from(\n                                //             decryptedContent,\n                                //             0,\n                                //             decryptedContent.length - padding);\n                                //         resolve(true);\n                                //     },\n                                // );\n\n                                resolve();\n                            },\n                        );\n                    },\n                );\n            });\n        }\n\n        for (const lcpUserKey of lcpUserKeys) {\n            try {\n                if (this.tryUserKey(lcpUserKey)) {\n                    return Promise.resolve();\n                }\n            } catch (err) {\n                // debug(err);\n                // ignore\n            }\n        }\n        return Promise.reject(1); // \"Passphrase fail.\"\n    }\n\n    private async getCRLPem(): Promise<string> {\n\n        return new Promise<any>(async (resolve, reject) => {\n\n            const crlURL = CRL_URL;\n\n            // Instead of using the hard-coded URLs,\n            // instead we can discover the CRL distribution points from the certificates:\n            // if (this.Encryption && this.Encryption.Profile && this.Signature && this.Signature.Certificate) {\n                // This gives CRL_URL_ALT (ARL, not CRL)\n                // const certPEM: string | undefined =\n                //     (this.Encryption.Profile === \"http://readium.org/lcp/profile-1.0\") ?\n                //         LCPCertificateProdProfile :\n                //     (this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\") ?\n                //         LCPCertificateBasicProfile :\n                //     undefined;\n\n                // const certBase64 = this.Signature.Certificate;\n                // debug(certBase64);\n                // const certPEM = \"-----BEGIN CERTIFICATE-----\\n\" +\n                //     (certBase64.match(/.{0,64}/g) as RegExpMatchArray).join(\"\\n\") +\n                //     \"-----END CERTIFICATE-----\";\n                // debug(certPEM);\n\n                // --------------------------------\n                // WITH sshpk (works, although the recursive extraction from the CRL extension is a bit strange)\n                // import { parseCertificate } from \"sshpk\";\n                // const certDER = Buffer.from(certBase64, \"base64\");\n                // // debug(certFromBase64.toString(\"hex\"));\n                // const cert = parseCertificate(certDER, \"x509\");\n                // // const cert = parseCertificate(certPEM, \"pem\");\n                // debug(cert);\n                // const exts = (cert as any).getExtensions(); // incorrect TypeScript Typings :(\n                // debug(exts);\n                // // CRL Distribution Points === 2.5.29.31 === id_ce_CRLDistributionPoints\n                // const ext = (cert as any).getExtension(\"2.5.29.31\"); // incorrect TypeScript Typings :(\n                // debug(ext);\n                // const buff = forge.util.createBuffer(ext.data, \"binary\");\n                // // const buff = Buffer.from(ext.data).toString(\"binary\");\n                // const certAsn1 = forge.asn1.fromDer(buff);\n                // // debug(certAsn1);\n                // console.log(util.inspect(certAsn1,\n                // tslint:disable-next-line:max-line-length\n                //     { breakLength: 1000, maxArrayLength: 1000, showHidden: false, depth: 1000, colors: true, customInspect: false }));\n                // function extractCrlUrl(val: any): string | undefined {\n                //     if (!val) {\n                //         return undefined;\n                //     }\n                //     if (typeof val === \"string\") {\n                //         return val;\n                //     }\n                //     if (val instanceof Array) {\n                //         for (const v of val) {\n                //             const ex = extractCrlUrl(v);\n                //             if (ex) {\n                //                 return ex;\n                //             }\n                //         }\n                //     }\n                //     if (typeof val === \"object\") {\n                //         return extractCrlUrl(val.value);\n                //     }\n                //     return undefined;\n                // }\n                // const crlURL_ = extractCrlUrl(certAsn1.value);\n                // debug(crlURL_);\n\n                // --------------------------------\n                // WITH forge (problem: ECDSA not supported, fails at forge.pki.certificateFromAsn1())\n                // import * as forge from \"node-forge\";\n                // const certDER = forge.util.decode64(certBase64);\n                // // debug(forge.util.bytesToHex(certDER));\n                // const certAsn1 = forge.asn1.fromDer(certDER);\n                // debug(certAsn1);\n                // if (certAsn1) {\n                //     try {\n                //         // const cert = forge.pki.certificateFromPem(certPEM);\n                //         const cert = forge.pki.certificateFromAsn1(certAsn1); // FAILS WITH ECDSA\n                //         // const certPEM = forge.pki.certificateToPem(cert);\n                //         // debug(certPEM);\n                //         const extDistributionPoints = cert.extensions.find((ext) => {\n                //             if (ext.name === \"cRLDistributionPoints\") {\n                //                 return true;\n                //             }\n                //             return false;\n                //         });\n                //         debug(extDistributionPoints);\n                //         if (extDistributionPoints && extDistributionPoints.value) {\n                //             const iHTTP = extDistributionPoints.value.indexOf(\"http\");\n                //             const urlStr = extDistributionPoints.value.substr(iHTTP);\n                //             const url = new URL(urlStr);\n                //             const crlURL_ = url.toString();\n                //             debug(\"crlURL_\");\n                //             debug(crlURL_);\n                //         }\n                //     } catch (err) {\n                //         debug(err);\n                //     }\n                // }\n\n                // --------------------------------\n                // WITH pkijs (does pass runtime, hard to integrate in TypeScript with NodeJS imports)\n                // import { fromBER } from \"asn1js\";\n                // import Certificate from \"pkijs/src/Certificate\";\n                // const asn1 = fromBER(certDER.buffer);\n                // const certificate = new Certificate({ schema: asn1.result });\n                // debug(certificate);\n            // }\n            const failure = (err: any) => {\n                // reject(err);\n                debug(err);\n                resolve(DUMMY_CRL);\n            };\n\n            const success = async (response: request.RequestResponse) => {\n\n                if (IS_DEV) {\n                    Object.keys(response.headers).forEach((header: string) => {\n                        debug(header + \" => \" + response.headers[header]);\n                    });\n                }\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    let failBuff: Buffer;\n                    try {\n                        failBuff = await streamToBufferPromise(response);\n                    } catch (buffErr) {\n                        if (IS_DEV) {\n                            debug(buffErr);\n                        }\n                        failure(response.statusCode);\n                        return;\n                    }\n                    try {\n                        const failStr = failBuff.toString(\"utf8\");\n                        if (IS_DEV) {\n                            debug(failStr);\n                        }\n                        try {\n                            const failJson = global.JSON.parse(failStr);\n                            if (IS_DEV) {\n                                debug(failJson);\n                            }\n                            failJson.httpStatusCode = response.statusCode;\n                            failure(failJson);\n                        } catch (jsonErr) {\n                            if (IS_DEV) {\n                                debug(jsonErr);\n                            }\n                            failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                        }\n                    } catch (strErr) {\n                        if (IS_DEV) {\n                            debug(strErr);\n                        }\n                        failure(response.statusCode);\n                    }\n                    return;\n                }\n\n                let responseData: Buffer;\n                try {\n                    responseData = await streamToBufferPromise(response);\n                } catch (err) {\n                    reject(err);\n                    return;\n                }\n\n                const lcplStr = \"-----BEGIN X509 CRL-----\\n\" +\n                    responseData.toString(\"base64\") + \"\\n-----END X509 CRL-----\";\n                if (IS_DEV) {\n                    debug(lcplStr);\n                }\n                resolve(lcplStr);\n            };\n\n            const headers = {\n                // \"Accept\": \"application/json,application/xml\",\n                // \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n            };\n\n            // No response streaming! :(\n            // https://github.com/request/request-promise/issues/90\n            const needsStreamingResponse = true;\n            if (needsStreamingResponse) {\n                request.get({\n                    headers,\n                    method: \"GET\",\n                    uri: crlURL,\n                })\n                    .on(\"response\", success)\n                    .on(\"error\", failure);\n            } else {\n                let response: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    response = await requestPromise({\n                        headers,\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: crlURL,\n                    });\n                } catch (err) {\n                    failure(err);\n                    return;\n                }\n\n                await success(response);\n            }\n        });\n    }\n\n    private tryUserKey(lcpUserKey: string): boolean {\n\n        // const userKey = forge.util.hexToBytes(passPhrase);\n        const userKey = Buffer.from(lcpUserKey, \"hex\");\n\n        const keyCheck = Buffer.from(this.Encryption.UserKey.KeyCheck, \"base64\");\n        // .toString(\"binary\");\n\n        // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\n        // if (keyCheck !== keyCheck_) {\n        //     debug(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\n        // }\n        // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\n        // debug(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\n        //     + forge.util.bytesToHex(keyCheck));\n\n        const encryptedLicenseID = keyCheck;\n\n        // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\n        const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\n\n        // debug(\"=============== LCP ID\");\n        // debug(lcp.ID);\n        // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\n        // debug(lcpIDbuff.toHex());\n        // debug(lcpIDbuff.toString());\n        // debug(lcpIDbuff.bytes());\n\n        // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\n        // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcCipher.update(lcpIDbuff);\n        // aesCbcCipher.finish();\n        // debug(\"=============== LCP CYPHER\");\n        // // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(aesCbcCipher.output,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // debug(aesCbcCipher.output.bytes());\n        // debug(aesCbcCipher.output.toHex());\n        // // debug(aesCbcCipher.output.toString());\n\n        const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\n\n        const decrypteds: Buffer[] = [];\n        const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv);\n        decryptStream.setAutoPadding(false);\n        const buff1 = decryptStream.update(encrypted);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1) {\n            decrypteds.push(buff1);\n        }\n        const buff2 = decryptStream.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2) {\n            decrypteds.push(buff2);\n        }\n        const decrypted = Buffer.concat(decrypteds);\n\n        const nPaddingBytes = decrypted[decrypted.length - 1];\n        const size = encrypted.length - nPaddingBytes;\n\n        const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\n\n        // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\n        // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher.update(toDecrypt);\n        // aesCbcDecipher.finish();\n\n        // // debug(\"=============== LCP DECYPHER\");\n        // // // breakLength: 100  maxArrayLength: undefined\n        // // console.log(util.inspect(aesCbcDecipher.output,\n        // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // // debug(aesCbcDecipher.output.bytes());\n        // // debug(aesCbcDecipher.output.toHex());\n        // // // debug(aesCbcDecipher.output.toString());\n        // const decryptedOut = aesCbcDecipher.output.toString();\n\n        if (this.ID !== decryptedOut) {\n            debug(\"Failed LCP ID check.\");\n            return false;\n        }\n\n        const encryptedContentKey =\n            Buffer.from(this.Encryption.ContentKey.EncryptedValue, \"base64\");\n        // .toString(\"binary\");\n\n        // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\n        const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\n\n        const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\n\n        const decrypteds2: Buffer[] = [];\n        const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv2);\n        decryptStream2.setAutoPadding(false);\n        const buff1_ = decryptStream2.update(encrypted2);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1_) {\n            decrypteds2.push(buff1_);\n        }\n        const buff2_ = decryptStream2.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2_) {\n            decrypteds2.push(buff2_);\n        }\n        const decrypted2 = Buffer.concat(decrypteds2);\n\n        const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\n        const size2 = encrypted2.length - nPaddingBytes2;\n\n        this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\n\n        // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\n        // const toDecrypt2 =\n        //     forge.util.createBuffer(encrypted2, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher2.update(toDecrypt2);\n        // aesCbcDecipher2.finish();\n        // const contentKey = Buffer.from(aesCbcDecipher2.output.bytes());\n\n        // let userKey: string | undefined;\n        // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\n\n        // if (lcpPass) {\n        //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\n        // } else {\n        //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\n        //     const sha256 = forge.md.sha256.create();\n        //     sha256.update(userPassPhrase, \"utf8\");\n        //     const digest = sha256.digest();\n        //     userKey = digest.bytes(); // 32 bytes => AES-256 key\n        //     // publication.AddToInternal(\"lcp_user_key\", userKey);\n        //     // debug(\"---LCP user key == passphrase + SHA256 digest HEX: \"\n        //     //     + digest.toHex() + \" // \" + userKey.length);\n        // }\n\n        return true;\n    }\n}\n"]}
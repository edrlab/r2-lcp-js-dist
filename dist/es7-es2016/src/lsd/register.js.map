{"version":3,"file":"register.js","sourceRoot":"","sources":["../../../../src/lsd/register.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/register\");\n\nexport async function lsdRegister(\n    lsdJson: any,\n    deviceIDManager: IDeviceIDManager): Promise<any> {\n\n    if (!lsdJson.links) {\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRegister = lsdJson.links.find((link: any) => {\n        return link.rel === \"register\";\n    });\n    if (!licenseRegister) {\n        return Promise.reject(\"No LSD register link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let doRegister = false;\n    if (lsdJson.status === \"ready\") {\n        doRegister = true;\n    } else if (lsdJson.status === \"active\") {\n\n        let deviceIDForStatusDoc: string | undefined;\n        try {\n            deviceIDForStatusDoc = await deviceIDManager.checkDeviceID(lsdJson.id);\n        } catch (err) {\n            debug(err);\n            // ignore\n            // return Promise.reject(\"xxx\");\n        }\n\n        if (!deviceIDForStatusDoc) {\n            doRegister = true;\n        } else if (deviceIDForStatusDoc !== deviceID) {\n            debug(\"LSD registered device ID is different?\");\n            // this should really never happen ... but let's ensure anyway.\n            doRegister = true;\n        }\n    }\n\n    if (!doRegister) {\n        return Promise.reject(\"No need to LSD register.\");\n    }\n\n    let registerURL = licenseRegister.href;\n    if (licenseRegister.templated === true || licenseRegister.templated === \"true\") {\n        const urlTemplate = new URITemplate(registerURL);\n        registerURL = (urlTemplate as any).expand({ id: deviceID, name: deviceNAME }, { strict: true });\n\n        // url = url.replace(\"{?id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    debug(\"REGISTER: \" + registerURL);\n\n    return new Promise<any>(async (resolve, reject) => {\n        const failure = (err: any) => {\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            Object.keys(response.headers).forEach((header: string) => {\n                debug(header + \" => \" + response.headers[header]);\n            });\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + response.statusCode);\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            debug(responseStr);\n            const responseJson = global.JSON.parse(responseStr);\n            debug(responseJson);\n\n            if (responseJson.status === \"active\") {\n                try {\n                    await deviceIDManager.recordDeviceID(responseJson.id);\n                } catch (err) {\n                    debug(err);\n                    // reject(err);\n                    // return;\n                }\n            }\n\n            resolve(responseJson);\n        };\n\n        const headers = {\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            request.post({\n                headers,\n                method: \"POST\",\n                uri: registerURL,\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure);\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers,\n                    method: \"POST\",\n                    resolveWithFullResponse: true,\n                    uri: registerURL,\n                });\n            } catch (err) {\n                failure(err);\n                return;\n            }\n\n            await success(response);\n        }\n    });\n}\n"]}